[
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/1-introduce/",
	"title": "Gi·ªõi thi·ªáu",
	"tags": [],
	"description": "",
	"content": "T·ªïng quan Trong workshop n√†y, b·∫°n s·∫Ω b·∫Øt ƒë·∫ßu m·ªôt h√†nh tr√¨nh to√†n di·ªán ƒë·ªÉ t·∫°o ra m·ªôt chatbot serverless s·ª≠ d·ª•ng c√°c c√¥ng ngh·ªá AI t·ªïng h·ª£p ti√™n ti·∫øn. B·∫°n s·∫Ω t·∫≠n d·ª•ng Amazon Bedrock, Amazon Kendra v√† d·ªØ li·ªáu c·ªßa ri√™ng m√¨nh ƒë·ªÉ x√¢y d·ª±ng m·ªôt giao di·ªán ƒë·ªëi tho·∫°i th√¥ng minh c√≥ th·ªÉ truy xu·∫•t v√† t·∫°o ra c√°c ph·∫£n h·ªìi ph√π h·ª£p theo ng·ªØ c·∫£nh. Workshop s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c·∫•u h√¨nh nhi·ªÅu d·ªãch v·ª• bao g·ªìm AWS Lambda, API Gateway v√† AWS Amplify, ƒë·ªìng th·ªùi b·∫°n s·∫Ω l√†m vi·ªác v·ªõi c√°c m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn kh√°c nhau nh∆∞ Claude 3, Mistral v√† Llama. Khi k·∫øt th√∫c workshop, b·∫°n s·∫Ω c√≥ m·ªôt chatbot ho√†n ch·ªânh c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü tri th·ª©c doanh nghi·ªáp s·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t Retrieval-Augmented Generation (RAG). Workshop n√†y gi·∫£i quy·∫øt c√°c tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng th·ª±c t·∫ø n∆°i c√°c t·ªï ch·ª©c c·∫ßn giao di·ªán ƒë·ªëi tho·∫°i th√¥ng minh, d·ª±a tr√™n d·ªØ li·ªáu.\nB·∫°n s·∫Ω h·ªçc c√°ch gi·∫£i quy·∫øt c√°c th√°ch th·ª©c nh∆∞ kh√°m ph√° tri th·ª©c doanh nghi·ªáp, t·ª± ƒë·ªông h√≥a h·ªó tr·ª£ kh√°ch h√†ng v√† truy xu·∫•t th√¥ng tin qua c√°c kho t√†i li·ªáu ph·ª©c t·∫°p. Gi·∫£i ph√°p b·∫°n s·∫Ω x√¢y d·ª±ng c√≥ th·ªÉ ƒë∆∞·ª£c √°p d·ª•ng trong nhi·ªÅu t√¨nh hu·ªëng kinh doanh, bao g·ªìm h·ªá th·ªëng h·ªó tr·ª£ k·ªπ thu·∫≠t, qu·∫£n l√Ω tri th·ª©c nh√¢n s·ª±, truy v·∫•n t√†i li·ªáu tu√¢n th·ªß v√† t·ªïng h·ª£p th√¥ng tin nghi√™n c·ª©u. B·∫±ng c√°ch th√†nh th·∫°o c√°c k·ªπ thu·∫≠t n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c trang b·ªã ƒë·ªÉ t·∫°o ra c√°c gi·∫£i ph√°p ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI c√≥ th·ªÉ bi·∫øn ƒë·ªïi c√°ch th·ª©c c√°c doanh nghi·ªáp t∆∞∆°ng t√°c v·ªõi d·ªØ li·ªáu c·ªßa h·ªç, cung c·∫•p c√°c ph·∫£n h·ªìi nhanh h∆°n, ch√≠nh x√°c h∆°n v√† nh·∫≠n th·ª©c ng·ªØ c·∫£nh ƒë·ªëi v·ªõi c√°c truy v·∫•n ph·ª©c t·∫°p.\nTrong su·ªët workshop n√†y, b·∫°n s·∫Ω c√≥ ƒë∆∞·ª£c ki·∫øn th·ª©c v√† k·ªπ nƒÉng sau:\nC√°ch x√¢y d·ª±ng c√°c gi·∫£i ph√°p AI t·ªïng h·ª£p b·∫±ng c√°ch s·ª≠ d·ª•ng Amazon Bedrock v√† ki·∫øn tr√∫c serverless. C√°ch s·ª≠ d·ª•ng AWS SAM ƒë·ªÉ t·∫°o v√† tri·ªÉn khai c√°c gi·∫£i ph√°p AI t·ªïng h·ª£p. C√°ch khai th√°c kh·∫£ nƒÉng c·ªßa c√°c M√¥ h√¨nh Ng√¥n ng·ªØ L·ªõn th√¥ng qua ki·∫øn tr√∫c Retrieval-Augmented Generation (RAG). T·∫ßm quan tr·ªçng c·ªßa qu·∫£n l√Ω d·ªØ li·ªáu hi·ªáu qu·∫£ trong b·ªëi c·∫£nh AI t·ªïng h·ª£p, bao g·ªìm vi·ªác t√¨m ngu·ªìn, l∆∞u tr·ªØ v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ n√¢ng cao hi·ªáu su·∫•t v√† t√≠nh li√™n quan c·ªßa c√°c ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o b·ªüi AI. Vai tr√≤ c·ªßa K·ªπ thu·∫≠t Prompt Engineering trong vi·ªác ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t·ªët h∆°n. B·∫°n s·∫Ω t·∫°o ra ki·∫øn tr√∫c sau ƒë√¢y cho workshop n√†y:\nüß© C√°c Th√†nh ph·∫ßn Users: Ng∆∞·ªùi d√πng cu·ªëi c·ªßa chatbot Web UI: Giao di·ªán ng∆∞·ªùi d√πng cho vi·ªác t∆∞∆°ng t√°c v·ªõi chatbot AWS Amplify (React, Vue.js): Qu·∫£n l√Ω front-end v√† x√°c th·ª±c, ƒë·∫∑c bi·ªát s·ª≠ d·ª•ng React ho·∫∑c Vue.js Amazon API Gateway: X·ª≠ l√Ω c√°c y√™u c·∫ßu API AWS Lambda (RAG/KB/LLM Functions): Th·ª±c thi c√°c h√†m serverless cho Retrieval-Augmented Generation, c√°c thao t√°c Knowledge Base v√† t∆∞∆°ng t√°c LLM Amazon Bedrock: Cung c·∫•p quy·ªÅn truy c·∫≠p v√†o c√°c m√¥ h√¨nh v√† d·ªãch v·ª• AI Large Language Models (Claude 3, Mistral, Llama etc.): C√°c m√¥ h√¨nh AI h·ªó tr·ª£ ph·∫£n h·ªìi Knowledge Bases: L∆∞u tr·ªØ th√¥ng tin c√≥ c·∫•u tr√∫c Amazon S3: L∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng cho t√†i li·ªáu v√† d·ªØ li·ªáu Documents (PDF, CSV, TXT etc.): C√°c lo·∫°i t·ªáp kh√°c nhau ƒë·ªÉ thu th·∫≠p Amazon Kendra: D·ªãch v·ª• t√¨m ki·∫øm th√¥ng minh Amazon OpenSearch: C∆° s·ªü d·ªØ li·ªáu vector v√† c√¥ng c·ª• t√¨m ki·∫øm cho t√¨m ki·∫øm t∆∞∆°ng ƒë·ªìng hi·ªáu qu·∫£ Amazon Cognito: X√°c th·ª±c v√† ·ªßy quy·ªÅn ng∆∞·ªùi d√πng üîÑ Quy tr√¨nh L√†m vi·ªác Ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi Web UI C√°c y√™u c·∫ßu ƒë∆∞·ª£c ƒë·ªãnh tuy·∫øn qua API Gateway ƒë·∫øn c√°c h√†m Lambda C√°c h√†m Lambda s·ª≠ d·ª•ng Bedrock ƒë·ªÉ truy c·∫≠p LLM, thao t√°c RAG v√† t∆∞∆°ng t√°c Knowledge Base Tri th·ª©c ƒë∆∞·ª£c truy xu·∫•t t·ª´ Knowledge Bases, S3, Kendra ho·∫∑c OpenSearch H·ªá th·ªëng t√≠ch h·ª£p c√°c lo·∫°i t√†i li·ªáu kh√°c nhau ƒë·ªÉ n√¢ng cao c∆° s·ªü tri th·ª©c ‚ú® T√≠nh nƒÉng Ch√≠nh Ki·∫øn tr√∫c serverless c√≥ th·ªÉ m·ªü r·ªông T·∫≠n d·ª•ng c√°c m√¥ h√¨nh LLM kh√°c nhau bao g·ªìm Claude 3, Mistral v√† Llama T√≠ch h·ª£p tri th·ª©c doanh nghi·ªáp th√¥ng qua Kendra v√† c√°c c∆° s·ªü tri th·ª©c t√πy ch·ªânh X√°c th·ª±c b·∫£o m·∫≠t v·ªõi Cognito Kh·∫£ nƒÉng thu th·∫≠p t√†i li·ªáu v√† t√¨m ki·∫øm linh ho·∫°t Front-end ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi c√°c framework hi·ªán ƒë·∫°i (React ho·∫∑c Vue.js) s·ª≠ d·ª•ng AWS Amplify Ki·∫øn tr√∫c n√†y cho ph√©p t·∫°o ra m·ªôt gi·∫£i ph√°p chatbot ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI t·ªïng h·ª£p c√≥ th·ªÉ m·ªü r·ªông theo nhu c·∫ßu trong khi cung c·∫•p c√°c ph·∫£n h·ªìi th√¥ng minh d·ª±a tr√™n c·∫£ tri th·ª©c c·ªßa LLM v√† tri th·ª©c ƒë·∫∑c th√π doanh nghi·ªáp. Vi·ªác s·ª≠ d·ª•ng React ho·∫∑c Vue.js v·ªõi AWS Amplify ƒë·∫£m b·∫£o m·ªôt giao di·ªán ng∆∞·ªùi d√πng ph·∫£n h·ªìi nhanh v√† hi·ªáu qu·∫£.\nAmazon Kendra Amazon Kendra l√† m·ªôt d·ªãch v·ª• truy xu·∫•t th√¥ng tin ƒë∆∞·ª£c qu·∫£n l√Ω v√† t√¨m ki·∫øm th√¥ng minh s·ª≠ d·ª•ng x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n v√† m√¥ h√¨nh deep learning ti√™n ti·∫øn. Kh√°c v·ªõi t√¨m ki·∫øm d·ª±a tr√™n t·ª´ kh√≥a truy·ªÅn th·ªëng, Amazon Kendra s·ª≠ d·ª•ng ƒë·ªô t∆∞∆°ng ƒë·ªìng ng·ªØ nghƒ©a v√† ng·ªØ c·∫£nh‚Äîc√πng v·ªõi kh·∫£ nƒÉng x·∫øp h·∫°ng‚Äîƒë·ªÉ quy·∫øt ƒë·ªãnh xem m·ªôt ƒëo·∫°n vƒÉn b·∫£n ho·∫∑c t√†i li·ªáu c√≥ li√™n quan ƒë·∫øn truy v·∫•n truy xu·∫•t hay kh√¥ng.\nNgu·ªìn: Amazon Kendra ‚Äì What is Kendra?\nNgu·ªìn n√†y cung c·∫•p gi·∫£i th√≠ch chi ti·∫øt h∆°n v·ªÅ c√°ch Amazon Kendra ho·∫°t ƒë·ªông.\nAmazon Bedrock Amazon Bedrock l√† m·ªôt d·ªãch v·ª• ƒë∆∞·ª£c qu·∫£n l√Ω ho√†n to√†n gi√∫p c√°c m√¥ h√¨nh n·ªÅn t·∫£ng (FMs) hi·ªáu su·∫•t cao t·ª´ c√°c c√¥ng ty AI h√†ng ƒë·∫ßu v√† Amazon c√≥ s·∫µn ƒë·ªÉ b·∫°n s·ª≠ d·ª•ng th√¥ng qua m·ªôt API th·ªëng nh·∫•t. B·∫°n c√≥ th·ªÉ ch·ªçn t·ª´ m·ªôt lo·∫°t c√°c m√¥ h√¨nh n·ªÅn t·∫£ng ƒë·ªÉ t√¨m m√¥ h√¨nh ph√π h·ª£p nh·∫•t cho tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ªßa m√¨nh. Amazon Bedrock c≈©ng cung c·∫•p m·ªôt b·ªô kh·∫£ nƒÉng r·ªông ƒë·ªÉ x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng AI t·ªïng h·ª£p v·ªõi t√≠nh b·∫£o m·∫≠t, quy·ªÅn ri√™ng t∆∞ v√† AI c√≥ tr√°ch nhi·ªám. S·ª≠ d·ª•ng Amazon Bedrock, b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng th·ª≠ nghi·ªám v√† ƒë√°nh gi√° c√°c m√¥ h√¨nh n·ªÅn t·∫£ng h√†ng ƒë·∫ßu cho c√°c tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ªßa m√¨nh, t√πy ch·ªânh ri√™ng t∆∞ ch√∫ng v·ªõi d·ªØ li·ªáu c·ªßa b·∫°n s·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t nh∆∞ fine-tuning v√† Retrieval Augmented Generation (RAG), v√† x√¢y d·ª±ng c√°c agent th·ª±c hi·ªán c√°c nhi·ªám v·ª• s·ª≠ d·ª•ng c√°c h·ªá th·ªëng doanh nghi·ªáp v√† ngu·ªìn d·ªØ li·ªáu c·ªßa b·∫°n.\nV·ªõi tr·∫£i nghi·ªám serverless c·ªßa Amazon Bedrock, b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu nhanh ch√≥ng, t√πy ch·ªânh ri√™ng t∆∞ c√°c m√¥ h√¨nh n·ªÅn t·∫£ng v·ªõi d·ªØ li·ªáu c·ªßa ri√™ng m√¨nh, v√† d·ªÖ d√†ng c≈©ng nh∆∞ b·∫£o m·∫≠t t√≠ch h·ª£p v√† tri·ªÉn khai ch√∫ng v√†o c√°c ·ª©ng d·ª•ng c·ªßa b·∫°n s·ª≠ d·ª•ng c√°c c√¥ng c·ª• AWS m√† kh√¥ng c·∫ßn qu·∫£n l√Ω b·∫•t k·ª≥ c∆° s·ªü h·∫° t·∫ßng n√†o.\nNgu·ªìn: Amazon Bedrock ‚Äì What is Amazon Bedrock?\nNgu·ªìn n√†y cung c·∫•p gi·∫£i th√≠ch chi ti·∫øt h∆°n v·ªÅ c√°ch Amazon Bedrock ho·∫°t ƒë·ªông.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/2-prerequiste/2.1-launchastack/",
	"title": "Kh·ªüi ch·∫°y CloudFormation stack",
	"tags": [],
	"description": "",
	"content": "\rRegions ƒë∆∞·ª£c h·ªó tr·ª£: B·∫°n n√™n ch·∫°y Workshop n√†y ·ªü Region us-west-2.\nM·ªôt template AWS CloudFormation ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thi·∫øt l·∫≠p c√°c t√†i nguy√™n lab trong AWS Region m√† b·∫°n ch·ªçn. B∆∞·ªõc n√†y l√† b·∫Øt bu·ªôc v√¨ c√°c h∆∞·ªõng d·∫´n sau ƒë√¢y d·ª±a tr√™n nh·ªØng t√†i nguy√™n n√†y. Template CloudFormation t·∫°o ra c√°c t√†i nguy√™n AWS sau:\nVSCode: VSCode tr√™n Amazon EC2 l√† m·ªôt m√¥i tr∆∞·ªùng ph√°t tri·ªÉn t√≠ch h·ª£p (IDE) d·ª±a tr√™n cloud m√† b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªÉ vi·∫øt, ch·∫°y v√† debug code ch·ªâ v·ªõi m·ªôt tr√¨nh duy·ªát. N√≥ bao g·ªìm tr√¨nh so·∫°n th·∫£o code, debugger v√† terminal. Trong workshop n√†y, b·∫°n s·ª≠ d·ª•ng VSCode editor ƒë·ªÉ tri·ªÉn khai m·ªôt ·ª©ng d·ª•ng backend, ƒë∆∞·ª£c x√¢y d·ª±ng b·∫±ng AWS Serverless Application Model (AWS SAM), v√† c≈©ng tri·ªÉn khai AWS Amplify frontend. Amazon S3: Amazon Simple Storage Service (Amazon S3) l√† m·ªôt d·ªãch v·ª• l∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng cung c·∫•p kh·∫£ nƒÉng m·ªü r·ªông h√†ng ƒë·∫ßu trong ng√†nh, t√≠nh kh·∫£ d·ª•ng c·ªßa d·ªØ li·ªáu, b·∫£o m·∫≠t v√† hi·ªáu su·∫•t. Kh√°ch h√†ng ·ªü m·ªçi quy m√¥ v√† ng√†nh c√¥ng nghi·ªáp c√≥ th·ªÉ l∆∞u tr·ªØ v√† b·∫£o v·ªá b·∫•t k·ª≥ l∆∞·ª£ng d·ªØ li·ªáu n√†o cho h·∫ßu nh∆∞ m·ªçi tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng, ch·∫≥ng h·∫°n nh∆∞ data lake, ·ª©ng d·ª•ng t·∫≠p trung cloud v√† ·ª©ng d·ª•ng di ƒë·ªông. Trong workshop n√†y, b·∫°n s·ª≠ d·ª•ng m·ªôt S3 bucket ƒë·ªÉ t·∫£i l√™n c√°c t√†i li·ªáu trung t√¢m tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ªßa m√¨nh. Amazon Kendra l·∫≠p ch·ªâ m·ª•c c√°c t√†i li·ªáu n√†y ƒë·ªÉ cung c·∫•p c√¢u tr·∫£ l·ªùi Retrieval-Augmented Generation (RAG) cho c√°c c√¢u h·ªèi m√† b·∫°n ƒë·∫∑t ra. Amazon Kendra: Amazon Kendra l√† m·ªôt d·ªãch v·ª• t√¨m ki·∫øm doanh nghi·ªáp th√¥ng minh gi√∫p b·∫°n t√¨m ki·∫øm qua c√°c kho l∆∞u tr·ªØ n·ªôi dung kh√°c nhau v·ªõi c√°c connector t√≠ch h·ª£p s·∫µn. T·∫£i xu·ªëng template CloudFormation:\nT·∫£i xu·ªëng template CloudFormation: T·∫£i xu·ªëng L∆∞u tr·ªØ file YAML template trong m·ªôt th∆∞ m·ª•c tr√™n m√°y local c·ªßa b·∫°n. ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn AWS CloudFormation Console üîó Tr√™n CloudFormation console, ch·ªçn Upload a template file. Ch·ªçn template m√† b·∫°n v·ª´a t·∫£i xu·ªëng, sau ƒë√≥ ch·ªçn Next ƒê·∫∑t t√™n cho stack, ch·∫≥ng h·∫°n nh∆∞ chatbot-startup-stack\nGi·ªØ c√°c gi√° tr·ªã kh√°c kh√¥ng thay ƒë·ªïi, v√† ch·ªçn Next\nƒê·ªëi v·ªõi Configure stack options, ch·ªçn c√°c t√πy ch·ªçn I acknowledge\u0026hellip; v√† ch·ªçn Next\nƒê·ªÉ tri·ªÉn khai template, ch·ªçn Submit Sau khi template ƒë∆∞·ª£c tri·ªÉn khai, ƒë·ªÉ xem l·∫°i c√°c t√†i nguy√™n ƒë√£ t·∫°o, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn CloudFormation Resources, v√† sau ƒë√≥ ch·ªçn CloudFormation stack m√† b·∫°n ƒë√£ t·∫°o.\n‚è≥ Vi·ªác tri·ªÉn khai template m·∫•t 10‚Äì15 ph√∫t ƒë·ªÉ ho√†n th√†nh t·∫•t c·∫£ vi·ªác cung c·∫•p t√†i nguy√™n AWS.\nCh√∫c m·ª´ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ti·∫øn h√†nh nhi·ªám v·ª• ti·∫øp theo.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/",
	"title": "T·∫°o Chatbot Serverless S·ª≠ D·ª•ng Amazon Bedrock, Amazon Kendra v√† D·ªØ Li·ªáu C·ªßa Ri√™ng B·∫°n",
	"tags": [],
	"description": "",
	"content": "T·∫°o Chatbot Serverless S·ª≠ D·ª•ng Amazon Bedrock, Amazon Kendra v√† D·ªØ Li·ªáu C·ªßa Ri√™ng B·∫°n T·ªïng quan Trong workshop n√†y, ch√∫ng ta s·∫Ω b·∫Øt ƒë·∫ßu m·ªôt h√†nh tr√¨nh to√†n di·ªán ƒë·ªÉ t·∫°o ra m·ªôt chatbot serverless s·ª≠ d·ª•ng c√°c c√¥ng ngh·ªá AI t·ªïng h·ª£p ti√™n ti·∫øn. ch√∫ng ta s·∫Ω t·∫≠n d·ª•ng Amazon Bedrock, Amazon Kendra v√† d·ªØ li·ªáu c·ªßa ri√™ng m√¨nh ƒë·ªÉ x√¢y d·ª±ng m·ªôt giao di·ªán ƒë·ªëi tho·∫°i th√¥ng minh c√≥ th·ªÉ truy xu·∫•t v√† t·∫°o ra c√°c ph·∫£n h·ªìi ph√π h·ª£p theo ng·ªØ c·∫£nh. Workshop s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c·∫•u h√¨nh nhi·ªÅu d·ªãch v·ª• bao g·ªìm AWS Lambda, API Gateway v√† AWS Amplify, ƒë·ªìng th·ªùi b·∫°n s·∫Ω l√†m vi·ªác v·ªõi c√°c m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn kh√°c nhau nh∆∞ Claude 3, Mistral v√† Llama. Khi k·∫øt th√∫c workshop, ch√∫ng ta s·∫Ω c√≥ m·ªôt chatbot ho√†n ch·ªânh c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü tri th·ª©c doanh nghi·ªáp s·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t Retrieval-Augmented Generation (RAG). Workshop n√†y gi·∫£i quy·∫øt c√°c tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng th·ª±c t·∫ø n∆°i c√°c t·ªï ch·ª©c c·∫ßn giao di·ªán ƒë·ªëi tho·∫°i th√¥ng minh, d·ª±a tr√™n d·ªØ li·ªáu.\nB·∫°n s·∫Ω ƒë∆∞·ª£c h·ªçc c√°ch gi·∫£i quy·∫øt c√°c th√°ch th·ª©c nh∆∞ kh√°m ph√° tri th·ª©c doanh nghi·ªáp, t·ª± ƒë·ªông h√≥a h·ªó tr·ª£ kh√°ch h√†ng v√† truy xu·∫•t th√¥ng tin qua c√°c kho t√†i li·ªáu ph·ª©c t·∫°p. Gi·∫£i ph√°p b·∫°n s·∫Ω x√¢y d·ª±ng c√≥ th·ªÉ ƒë∆∞·ª£c √°p d·ª•ng trong nhi·ªÅu t√¨nh hu·ªëng kinh doanh, bao g·ªìm h·ªá th·ªëng h·ªó tr·ª£ k·ªπ thu·∫≠t, qu·∫£n l√Ω tri th·ª©c nh√¢n s·ª±, truy v·∫•n t√†i li·ªáu tu√¢n th·ªß v√† t·ªïng h·ª£p th√¥ng tin nghi√™n c·ª©u. B·∫±ng c√°ch th√†nh th·∫°o c√°c k·ªπ thu·∫≠t n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c trang b·ªã ƒë·ªÉ t·∫°o ra c√°c gi·∫£i ph√°p ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI c√≥ th·ªÉ bi·∫øn ƒë·ªïi c√°ch th·ª©c c√°c doanh nghi·ªáp t∆∞∆°ng t√°c v·ªõi d·ªØ li·ªáu c·ªßa h·ªç, cung c·∫•p c√°c ph·∫£n h·ªìi nhanh h∆°n, ch√≠nh x√°c h∆°n v√† nh·∫≠n th·ª©c ng·ªØ c·∫£nh ƒë·ªëi v·ªõi c√°c truy v·∫•n ph·ª©c t·∫°p.\nB·∫°n s·∫Ω t·∫°o ra ki·∫øn tr√∫c sau ƒë√¢y cho workshop n√†y:\nN·ªôi dung Gi·ªõi thi·ªáu Chu·∫©n b·ªã Tri·ªÉn khai ·ª®ng d·ª•ng Serverless Amazon Bedrock H∆∞·ªõng d·∫´n Amazon Bedrock Console Chat T·ªïng qu√°t v·ªõi Nhi·ªÅu LLM L·∫≠p ch·ªâ m·ª•c D·ªØ li·ªáu Ngu·ªìn b·∫±ng Amazon Kendra RAG Chat v·ªõi Nhi·ªÅu LLM K·ªπ thu·∫≠t Prompt Engineering RAG Chat v·ªõi Bedrock Knowledge Bases D·ªçn d·∫πp T√†i nguy√™n "
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/2-prerequiste/",
	"title": "Chu·∫©n b·ªã ",
	"tags": [],
	"description": "",
	"content": "\rB·∫°n n√™n s·ª≠ d·ª•ng IAM user v·ªõi quy·ªÅn qu·∫£n tr·ªã thay v√¨ t√†i kho·∫£n root. B·ªüi v√¨ m·ªôt s·ªë d·ªãch v·ª• AWS, ch·∫≥ng h·∫°n nh∆∞ Knowledge Bases trong Amazon Bedrock ho·∫∑c c√°c d·ªãch v·ª• li√™n quan ƒë·∫øn AI kh√°c, c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø ho·∫∑c kh√¥ng kh·∫£ d·ª•ng khi s·ª≠ d·ª•ng t√†i kho·∫£n root. V√¨ l√Ω do b·∫£o m·∫≠t v√† t∆∞∆°ng th√≠ch, c√°c best practice c·ªßa AWS c≈©ng khuy√™n tr√°nh s·ª≠ d·ª•ng root user cho c√°c t√°c v·ª• h√†ng ng√†y.\nRegions ƒë∆∞·ª£c h·ªó tr·ª£: us-west-2.\nTrong workshop n√†y, b·∫°n s·∫Ω c·∫•u h√¨nh c√°c d·ªãch v·ª• AWS sau ƒë·ªÉ x√¢y d·ª±ng m·ªôt chatbot AI t·ªïng h·ª£p.\nAmazon Bedrock Knowledge Bases Amazon Kendra AWS Lambda M·ªôt template AWS CloudFormation ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thi·∫øt l·∫≠p c√°c t√†i nguy√™n lab trong AWS Region m√† b·∫°n ch·ªçn. B∆∞·ªõc n√†y l√† b·∫Øt bu·ªôc v√¨ c√°c h∆∞·ªõng d·∫´n sau ƒë√¢y d·ª±a tr√™n nh·ªØng t√†i nguy√™n n√†y\nChi ph√≠: L∆∞u √Ω r·∫±ng n·∫øu b·∫°n ch·∫°y workshop n√†y trong t√†i kho·∫£n AWS c·ªßa ri√™ng m√¨nh, b·∫°n s·∫Ω ph·∫£i ch·ªãu chi ph√≠ cho vi·ªác s·ª≠ d·ª•ng t√†i nguy√™n. Ph·∫ßn Clean Up trong b·∫£ng ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i c√≥ th·ªÉ gi√∫p b·∫°n lo·∫°i b·ªè c√°c t√†i nguy√™n kh·ªèi m√¥i tr∆∞·ªùng c·ªßa m√¨nh khi ho√†n th√†nh.\nN·ªôi dung 2.1 Kh·ªüi ch·∫°y CloudFormation stack 2.2 Kh·ªüi ch·∫°y VSCode tr√™n AWS v√† Thi·∫øt l·∫≠p M√¥i tr∆∞·ªùng "
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/2-prerequiste/2.2-launchvscode/",
	"title": "Kh·ªüi ch·∫°y VSCode tr√™n AWS v√† Thi·∫øt l·∫≠p M√¥i tr∆∞·ªùng",
	"tags": [],
	"description": "",
	"content": "Kh·ªüi ch·∫°y VSCode tr√™n AWS ƒê·ªÉ thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng c·ªßa b·∫°n, h√£y m·ªü m√¥i tr∆∞·ªùng VSCode (thay th·∫ø cho AWS Cloud9) ƒë∆∞·ª£c l∆∞u tr·ªØ tr√™n Amazon EC2.\nM·ªü AWS CloudFormation console. M·ªü stack chatbot-startup-stack. M·ªü Outputs, Sao ch√©p VSCodeWorkspaceURL v√† m·∫≠t kh·∫©u VSCodeWorkspacePassword v√†o m·ªôt notepad. 4. M·ªü m·ªôt c·ª≠a s·ªï ho·∫∑c tab tr√¨nh duy·ªát m·ªõi, nh·∫≠p VSCode workspace url, v√† nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ kh·ªüi ch·∫°y VSCode editor.\nSau khi kh·ªüi ch·∫°y th√†nh c√¥ng, theme m·∫∑c ƒë·ªãnh l√† m√†u tr·∫Øng, b·∫°n c√≥ th·ªÉ t√πy ch·ªçn thay ƒë·ªïi sang c√°c color theme kh√°c. V√≠ d·ª•: Settings Icon -\u0026gt; Themes -\u0026gt; Color Theme -\u0026gt; Dark (Visual Studio)\nVSCode editor c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng. Ch√∫c m·ª´ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ti·∫øn h√†nh nhi·ªám v·ª• ti·∫øp theo.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/3-accessibilitytoinstances/",
	"title": "Tri·ªÉn khai ·ª®ng d·ª•ng Serverless Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Trong nhi·ªám v·ª• n√†y, b·∫°n s·∫Ω x√¢y d·ª±ng v√† tri·ªÉn khai c·∫£ hai th√†nh ph·∫ßn backend v√† frontend c·ªßa ·ª©ng d·ª•ng. Backend ƒë∆∞·ª£c tri·ªÉn khai d∆∞·ªõi d·∫°ng ·ª©ng d·ª•ng serverless b·∫±ng AWS SAM, t·∫°o ra m·ªôt Amazon API Gateway, c√°c h√†m AWS Lambda c·∫ßn thi·∫øt, m·ªôt nh√≥m ng∆∞·ªùi d√πng Cognito v√† l∆∞u tr·ªØ th√¥ng tin ƒëƒÉng nh·∫≠p trong AWS Secrets Manager.\nFrontend ƒë∆∞·ª£c x√¢y d·ª±ng b·∫±ng Vue.js v√† tri·ªÉn khai b·∫±ng AWS Amplify. Giao di·ªán ng∆∞·ªùi d√πng frontend s·∫Ω g·ªçi c√°c API d·ª±a tr√™n REST ƒë∆∞·ª£c l∆∞u tr·ªØ b·∫±ng Amazon API Gateway, API Gateway g·ªçi h√†m AWS Lambda, h√†m n√†y g·ªçi c√°c API Amazon Bedrock. Ki·∫øn tr√∫c serverless n√†y cho ph√©p ·ª©ng d·ª•ng m·ªü r·ªông hi·ªáu qu·∫£ v√† gi·∫£m thi·ªÉu chi ph√≠ v·∫≠n h√†nh qu·∫£n l√Ω c∆° s·ªü h·∫° t·∫ßng b√™n d∆∞·ªõi. Qu√° tr√¨nh tri·ªÉn khai ƒë∆∞·ª£c t·ª± ƒë·ªông h√≥a th√¥ng qua m·ªôt script startup.sh, x·ª≠ l√Ω to√†n b·ªô vi·ªác cung c·∫•p to√†n b·ªô ngƒÉn x·∫øp ·ª©ng d·ª•ng t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi.\nX√¢y d·ª±ng v√† tri·ªÉn khai ·ª©ng d·ª•ng chatbot T·ª´ tr√¨nh ch·ªânh s·ª≠a VSCode, ch·∫°y l·ªánh sau ƒë·ªÉ thi·∫øt l·∫≠p m·ªôt bi·∫øn m√¥i tr∆∞·ªùng ch√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong su·ªët h·ªôi th·∫£o. Thay th·∫ø \u0026lt;chatbot-startup-stack\u0026gt; b·∫±ng t√™n ngƒÉn x·∫øp th·ª±c t·∫ø t·ª´ b·∫£ng ƒëi·ªÅu khi·ªÉn AWS CloudFormation.\nBi·∫øn CFNStackName s·∫Ω ƒë∆∞·ª£c tham chi·∫øu sau n√†y khi t∆∞∆°ng t√°c v·ªõi c√°c t√†i nguy√™n ƒë∆∞·ª£c cung c·∫•p nh∆∞ m·ªôt ph·∫ßn c·ªßa tri·ªÉn khai ·ª©ng d·ª•ng. V√† bi·∫øn m√¥i tr∆∞·ªùng S3BucketName s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng trong su·ªët h·ªôi th·∫£o ƒë·ªÉ l∆∞u tr·ªØ c√°c ngu·ªìn d·ªØ li·ªáu v√† c∆° s·ªü tri th·ª©c c·∫ßn thi·∫øt cho ·ª©ng d·ª•ng. C√°c d·ªãch v·ª• backend s·∫Ω t∆∞∆°ng t√°c v·ªõi n·ªôi dung c·ªßa bucket S3 n√†y ƒë·ªÉ truy xu·∫•t v√† x·ª≠ l√Ω th√¥ng tin c·∫ßn thi·∫øt cho ch·ª©c nƒÉng c·ªßa ·ª©ng d·ª•ng. Vi·ªác ƒë·∫£m b·∫£o bi·∫øn m√¥i tr∆∞·ªùng S3BucketName ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng s·∫Ω cho ph√©p c√°c nhi·ªám v·ª• h·ªôi th·∫£o truy c·∫≠p v√† s·ª≠ d·ª•ng li·ªÅn m·∫°ch d·ªØ li·ªáu c·∫ßn thi·∫øt ƒë∆∞·ª£c l∆∞u tr·ªØ t·∫°i v·ªã tr√≠ trung t√¢m n√†y.\nexport CFNStackName=\u0026#34;chatbot-startup-stack\u0026#34; export S3BucketName=$(aws cloudformation describe-stacks --stack-name ${CFNStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;S3BucketName\u0026#39;].OutputValue\u0026#34; --output text) echo \u0026#34;S3 bucket name: $S3BucketName\u0026#34; ƒê·ªÉ sao ch√©p source code cho workshop n√†y, ch·∫°y l·ªánh sau. Code ·ª©ng d·ª•ng ƒë∆∞·ª£c l∆∞u tr·ªØ trong kho GitHub aws-samples open-source, ch·ª©a nhi·ªÅu d·ª± √°n m·∫´u do AWS cung c·∫•p. Vi·ªác sao ch√©p kho s·∫Ω ƒë·∫£m b·∫£o b·∫°n c√≥ phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa m√£ v√† c√≥ th·ªÉ d·ªÖ d√†ng th·ª±c hi·ªán b·∫•t k·ª≥ s·ª≠a ƒë·ªïi n√†o khi ti·∫øn h√†nh c√°c nhi·ªám v·ª• workshop.\ncd ~/environment git clone https://github.com/aws-samples/bedrock-serverless-workshop.git ƒê·ªÉ build v√† tri·ªÉn khai backend v√† frontend c·ªßa ·ª©ng d·ª•ng serverless, ch·∫°y l·ªánh sau. Script aws-creds.py ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o m·ªôt AWS profile, ƒë√¢y l√† b∆∞·ªõc c·∫ßn thi·∫øt cho qu√° tr√¨nh tri·ªÉn khai ph·∫ßn frontend sau ƒë√≥.\ncd ~/environment/bedrock-serverless-workshop python3 aws-creds.py chmod +x startup.sh ./startup.sh Script s·∫Ω th·ª±c hi·ªán c√°c b∆∞·ªõc sau:\nN√¢ng c·∫•p h·ªá ƒëi·ªÅu h√†nh, c√†i ƒë·∫∑t ph·∫ßn m·ªÅm jq.\nBuild backend b·∫±ng sam build.\nTri·ªÉn khai backend b·∫±ng sam deploy.\nC√†i ƒë·∫∑t Amplify v√† build frontend.\nTri·ªÉn khai ·ª©ng d·ª•ng frontend th√¥ng qua Amplify.\nScript s·∫Ω m·∫•t t·ª´ 2 ƒë·∫øn 5 ph√∫t ƒë·ªÉ ho√†n t·∫•t.\nN·∫øu c√≥ c·ª≠a s·ªï popup c·∫£nh b√°o t·ª´ git, h√£y ch·ªçn OK.\nKhi ch·∫°y amplify add host, b·∫°n s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu ch·ªçn hai l·∫ßn. Gi·ªØ nguy√™n c√°c t√πy ch·ªçn m·∫∑c ƒë·ªãnh v√† nh·∫•n Enter: Hosting with Amplify Console (Managed hosting with custom domains, Continuous deployment) v√† Manual deployment\nSau khi ho√†n t·∫•t, b·∫°n s·∫Ω th·∫•y h√¨nh ·∫£nh sau:\nSao ch√©p v√† l∆∞u l·∫°i gi√° tr·ªã c·ªßa ƒë·ªãa ch·ªâ amplifyapp url, user_id v√† password v√†o m·ªôt tr√¨nh so·∫°n th·∫£o vƒÉn b·∫£n. B·∫°n s·∫Ω s·ª≠ d·ª•ng c√°c th√¥ng tin n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o giao di·ªán ng∆∞·ªùi d√πng.\nM·ªü ƒë·ªãa ch·ªâ amplifyapp url tr√™n tr√¨nh duy·ªát web v√† ƒëƒÉng nh·∫≠p b·∫±ng th√¥ng tin ·ªü tr√™n. Sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng, b·∫°n s·∫Ω th·∫•y m√†n h√¨nh ch√≠nh nh∆∞ b√™n d∆∞·ªõi. L∆∞u √Ω, hi·ªán t·∫°i h·ªá th·ªëng v·∫´n ch∆∞a s·∫µn s√†ng v·ªõi c√°c t√†i li·ªáu ngu·ªìn v√† t√≠nh nƒÉng chat ch∆∞a ho·∫°t ƒë·ªông. Trong t√°c v·ª• ti·∫øp theo, b·∫°n s·∫Ω ho√†n t·∫•t vi·ªác l·∫≠p ch·ªâ m·ª•c t√†i li·ªáu ngu·ªìn v√† ki·ªÉm th·ª≠ v·ªõi c√°c c√¢u h·ªèi m·∫´u. Tr∆∞·ªõc khi chuy·ªÉn sang t√°c v·ª• ti·∫øp theo, ch·∫°y c√°c l·ªánh b√™n d∆∞·ªõi ‚Äî ƒë√¢y l√† c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt cho c√°c l·ªánh SAM v√† Amplify build trong ph·∫ßn c√≤n l·∫°i c·ªßa lab.\nCh·∫°y c√°c l·ªánh sau trong terminal c·ªßa VS Code:\nexport SAMStackName=\u0026#34;sam-$CFNStackName\u0026#34; export AWS_REGION=$(aws configure get region) export KendraIndexID=$(aws cloudformation describe-stacks --stack-name ${CFNStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;KendraIndexID\u0026#39;].OutputValue\u0026#34; --output text) export BedrockApiUrl=$(aws cloudformation describe-stacks --stack-name ${SAMStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;BedrockApiUrl\u0026#39;].OutputValue\u0026#34; --output text) export SecretName=$(aws cloudformation describe-stacks --stack-name ${SAMStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;SecretsName\u0026#39;].OutputValue\u0026#34; --output text) export BedrockApiUrl=$(aws cloudformation describe-stacks --stack-name ${SAMStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;BedrockApiUrl\u0026#39;].OutputValue\u0026#34; --output text) export UserPoolId=$(aws cloudformation describe-stacks --stack-name ${SAMStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;CognitoUserPool\u0026#39;].OutputValue\u0026#34; --output text) export UserPoolClientId=$(aws cloudformation describe-stacks --stack-name ${SAMStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;CongnitoUserPoolClientID\u0026#39;].OutputValue\u0026#34; --output text) export SecretName=$(aws cloudformation describe-stacks --stack-name ${SAMStackName} --query \u0026#34;Stacks[0].Outputs[?OutputKey==\u0026#39;SecretsName\u0026#39;].OutputValue\u0026#34; --output text) export PATH=~/.npm-global/bin:$PATH Sau khi ch·∫°y, b·∫°n c√≥ th·ªÉ ki·ªÉm tra l·∫°i b·∫±ng l·ªánh export v√† x√°c minh xem c√°c bi·∫øn nh∆∞ AWS_REGION, KendraIndexID, BedrockApiUrl, \u0026hellip; ƒë√£ ƒë∆∞·ª£c g√°n gi√° tr·ªã ch∆∞a.\nN·∫øu c√°c bi·∫øn ch∆∞a c√≥ gi√° tr·ªã, h√£y ki·ªÉm tra l·∫°i v√πng (region) c·ªßa b·∫°n ƒë·ªÉ ƒë·∫£m b·∫£o ƒëang ƒë·∫∑t l√† us-west-2. N·∫øu ch∆∞a ƒë√∫ng, h√£y x√≥a stack, ch·ªçn l·∫°i v√πng ph√π h·ª£p v√† th·ª±c hi·ªán l·∫°i c√°c b∆∞·ªõc.\nYou have completed the deployment of the backend and frontend of the chatbot using Amazon Bedrock serverless\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/4-walkthroughbedrock/",
	"title": "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Amazon Bedrock Console",
	"tags": [],
	"description": "",
	"content": "S·ª≠ d·ª•ng Amazon Bedrock ƒë·ªÉ x√¢y d·ª±ng v√† m·ªü r·ªông c√°c ·ª©ng d·ª•ng AI t·∫°o sinh (generative AI) v·ªõi c√°c m√¥ h√¨nh n·ªÅn (Foundation Models - FMs). Amazon Bedrock l√† m·ªôt d·ªãch v·ª• ƒë∆∞·ª£c qu·∫£n l√Ω to√†n ph·∫ßn, cung c·∫•p quy·ªÅn truy c·∫≠p v√†o c√°c m√¥ h√¨nh n·ªÅn t·ª´ c√°c startup AI h√†ng ƒë·∫ßu c≈©ng nh∆∞ t·ª´ Amazon th√¥ng qua API. B·∫°n c√≥ th·ªÉ l·ª±a ch·ªçn t·ª´ nhi·ªÅu m√¥ h√¨nh kh√°c nhau ƒë·ªÉ t√¨m ra m√¥ h√¨nh ph√π h·ª£p nh·∫•t v·ªõi tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ªßa m√¨nh. V·ªõi tr·∫£i nghi·ªám serverless c·ªßa Amazon Bedrock, b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu nhanh ch√≥ng, t√πy ch·ªânh ri√™ng c√°c m√¥ h√¨nh b·∫±ng d·ªØ li·ªáu c·ªßa b·∫°n, v√† d·ªÖ d√†ng t√≠ch h·ª£p c≈©ng nh∆∞ tri·ªÉn khai v√†o c√°c ·ª©ng d·ª•ng c·ªßa m√¨nh b·∫±ng c√°c c√¥ng c·ª• AWS m√† kh√¥ng c·∫ßn qu·∫£n l√Ω h·∫° t·∫ßng.\nM·ªü B·∫£ng ƒëi·ªÅu khi·ªÉn Amazon Bedrock\nK√≠ch ho·∫°t quy·ªÅn truy c·∫≠p m√¥ h√¨nh ƒê·ªÉ ho√†n th√†nh workshop n√†y, b·∫°n c·∫ßn b·∫≠t quy·ªÅn truy c·∫≠p c√°c m√¥ h√¨nh Claude3, Mistral v√† Llama. Ngo√†i ra, h√£y ki·ªÉm tra xem m√¥ h√¨nh Titan Text Embeddings V2 ƒë√£ ƒë∆∞·ª£c b·∫≠t ch∆∞a; m√¥ h√¨nh n√†y th∆∞·ªùng ƒë∆∞·ª£c b·∫≠t m·∫∑c ƒë·ªãnh, nh∆∞ng h√£y x√°c nh·∫≠n l·∫°i tr·∫°ng th√°i v√† k√≠ch ho·∫°t n·∫øu c·∫ßn. H√£y ƒë·∫£m b·∫£o r·∫±ng b·∫°n ƒë√£ c√≥ quy·ªÅn truy c·∫≠p t·∫•t c·∫£ c√°c m√¥ h√¨nh c·∫ßn thi·∫øt tr∆∞·ªõc khi ti·∫øp t·ª•c.\n·ªû g√≥c tr√™n b√™n tr√°i c·ªßa b·∫£ng ƒëi·ªÅu khi·ªÉn Amazon Bedrock, ch·ªçn bi·ªÉu t∆∞·ª£ng menu (ba d·∫•u g·∫°ch ngang). Trong b·∫£ng ƒëi·ªÅu h∆∞·ªõng, ch·ªçn Model access, sau ƒë√≥ ch·ªçn Enable specific models. Ch·ªçn c√°c m√¥ h√¨nh ng√¥n ng·ªØ sau: Titan Text Embeddings V2 Claude 3.5 Sonnet Claude 3 Haiku Claude 3 Opus Llama 3.1 8B Instruct Mistral 7B Instruct Ch·ªçn Next Ch·ªçn Submit Trong m√¥i tr∆∞·ªùng workshop hi·ªán t·∫°i, m√¥ h√¨nh Claude 3 Opus ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£. N·∫øu b·∫°n g·∫∑p l·ªói li√™n quan ƒë·∫øn Opus, c√≥ th·ªÉ b·ªè qua v√† ti·∫øp t·ª•c m√† kh√¥ng c·∫ßn th·ª≠ nghi·ªám v·ªõi m√¥ h√¨nh n√†y. Tuy nhi√™n, n·∫øu b·∫°n tri·ªÉn khai ·ª©ng d·ª•ng n√†y trong t√†i kho·∫£n AWS c·ªßa ri√™ng m√¨nh, b·∫°n s·∫Ω c√≥ th·ªÉ k√≠ch ho·∫°t m√¥ h√¨nh Opus m√† kh√¥ng g·∫∑p v·∫•n ƒë·ªÅ g√¨.\nƒê·∫∑t c√¢u h·ªèi ·ªû g√≥c tr√™n b√™n tr√°i c·ªßa b·∫£ng ƒëi·ªÅu khi·ªÉn Amazon Bedrock, ch·ªçn bi·ªÉu t∆∞·ª£ng menu (ba d·∫•u g·∫°ch ngang).\nTrong m·ª•c Test, ch·ªçn Chat / Text playground.\nB·∫°n c≈©ng c√≥ th·ªÉ d√†nh th·ªùi gian kh√°m ph√° c√°c t√πy ch·ªçn kh√°c trong menu b√™n tr√°i.\nTrong Chat / Text playground, ch·ªçn Select model. Trong c·ª≠a s·ªï Select model, ch·ªçn Anthropic v√† ch·ªçn Claude 3 Haiku. Ch·ªçn Apply.\nTrong h·ªôp vƒÉn b·∫£n nh·∫≠p prompt, nh·∫≠p c√¢u h·ªèi, sau ƒë√≥ ch·ªçn Run.\nV√≠ d·ª• c√¢u h·ªèi ‚Äì List top 10 cities of VietNam by population?\nM√¥ h√¨nh s·∫Ω tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t∆∞∆°ng t·ª± nh∆∞ sau:\nTrong ph·∫ßn C·∫•u h√¨nh (Configurations),\nB·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªô ng·∫´u nhi√™n b·∫±ng c√°ch thay ƒë·ªïi c√°c tham s·ªë nh∆∞ temperature, Top P, Top K v√† ƒë·ªô d√†i token. B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ c√°c c√¢u h·ªèi kh√°c nhau ƒë·ªÉ tr·∫£i nghi·ªám ph·∫£n h·ªìi t·ª´ m√¥ h√¨nh.\nTemperature l√† tham s·ªë ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô ng·∫´u nhi√™n trong c√¢u tr·∫£ l·ªùi; gi√° tr·ªã c√†ng cao th√¨ ph·∫£n h·ªìi c√†ng s√°ng t·∫°o. Top P l√† ng∆∞·ª°ng x√°c su·∫•t t√≠ch l≈©y d√πng ƒë·ªÉ ch·ªçn c√°c token ·ª©ng vi√™n, gi√∫p c√¢n b·∫±ng gi·ªØa logic v√† ƒëa d·∫°ng. Top K l√† s·ªë l∆∞·ª£ng token c√≥ x√°c su·∫•t cao nh·∫•t ƒë∆∞·ª£c xem x√©t ƒë·ªÉ ch·ªçn cho t·ª´ ti·∫øp theo. Max token length l√† s·ªë token t·ªëi ƒëa m√† m√¥ h√¨nh s·∫Ω sinh ra trong m·ªôt ph·∫£n h·ªìi, gi√∫p ki·ªÉm so√°t ƒë·ªô d√†i v√† chi ph√≠ ƒë·∫ßu ra. üéâ Xin ch√∫c m·ª´ng B·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/5-multiplellms/",
	"title": "Tr√≤ chuy·ªán t·ªïng qu√°t v·ªõi nhi·ªÅu m√¥ h√¨nh LLM",
	"tags": [],
	"description": "",
	"content": "\rPort Forwarding (chuy·ªÉn ti·∫øp c·ªïng) l√† m·ªôt c√°ch h·ªØu √≠ch ƒë·ªÉ chuy·ªÉn h∆∞·ªõng l∆∞u l∆∞·ª£ng m·∫°ng t·ª´ m·ªôt ƒë·ªãa ch·ªâ IP - C·ªïng n√†y sang m·ªôt ƒë·ªãa ch·ªâ IP - C·ªïng kh√°c. V·ªõi Port Forwarding, ch√∫ng ta c√≥ th·ªÉ truy c·∫≠p m·ªôt EC2 instance n·∫±m trong private subnet t·ª´ m√°y l√†m vi·ªác c√° nh√¢n (workstation).\nB·∫°n ƒë√£ tri·ªÉn khai th√†nh c√¥ng ·ª©ng d·ª•ng chatbot s·ª≠ d·ª•ng Amazon Bedrock v·ªõi ki·∫øn tr√∫c serverless, trong ƒë√≥ backend s·ª≠ d·ª•ng AWS SAM v√† frontend s·ª≠ d·ª•ng AWS Amplify. Giao di·ªán frontend ƒë√≥ng vai tr√≤ l√† giao di·ªán ng∆∞·ªùi d√πng c∆° b·∫£n ƒë·ªÉ ki·ªÉm th·ª≠ gi·∫£i ph√°p v·ªõi c√°c c√¢u h·ªèi v√† tham s·ªë prompt kh√°c nhau. Trong ph·∫ßn n√†y, b·∫°n s·∫Ω c·∫≠p nh·∫≠t v√† tri·ªÉn khai m·ªôt h√†m Lambda h·ªó tr·ª£ tr√≤ chuy·ªán t·ªïng qu√°t v·ªõi nhi·ªÅu m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn (LLM).\nM·ªü tr√¨nh so·∫°n th·∫£o VSCode (nh∆∞ ƒë√£ h∆∞·ªõng d·∫´n trong Nhi·ªám v·ª• 1). Trong d·ª± √°n bedrock-serverless-workshop, m·ªü file /lambdas/llmFunctions/llmfunction.py, sao ch√©p ƒëo·∫°n m√£ d∆∞·ªõi ƒë√¢y v√† c·∫≠p nh·∫≠t n·ªôi dung c·ªßa h√†m. H√†m n√†y ch·ª©a logic h·ªó tr·ª£ c√°c m√¥ h√¨nh Claude3 (Haiku, Sonnet, v.v.), Mistral v√† Llama. import boto3 import json import traceback region = boto3.session.Session().region_name def lambda_handler(event, context): boto3_version = boto3.__version__ print(f\u0026#34;Boto3 version: {boto3_version}\u0026#34;) print(f\u0026#34;Event is: {event}\u0026#34;) event_body = json.loads(event[\u0026#34;body\u0026#34;]) prompt = event_body[\u0026#34;query\u0026#34;] temperature = event_body[\u0026#34;temperature\u0026#34;] max_tokens = event_body[\u0026#34;max_tokens\u0026#34;] model_id = event_body[\u0026#34;model_id\u0026#34;] response = \u0026#39;\u0026#39; status_code = 200 try: if model_id == \u0026#39;mistral.mistral-7b-instruct-v0:2\u0026#39;: response = invoke_mistral_7b(model_id, prompt, temperature, max_tokens) elif model_id == \u0026#39;meta.llama3-1-8b-instruct-v1:0\u0026#39;: response = invoke_llama(model_id, prompt, temperature, max_tokens) else: response = invoke_claude(model_id, prompt, temperature, max_tokens) return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;answer\u0026#39;: response}) } except Exception as e: print(f\u0026#34;An unexpected error occurred: {str(e)}\u0026#34;) stack_trace = traceback.format_exc() print(stack_trace) return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: str(e)}) } def invoke_claude(model_id, prompt, temperature, max_tokens): try: instruction = f\u0026#34;Human: {prompt} nAssistant:\u0026#34; bedrock_runtime_client = boto3.client(service_name=\u0026#34;bedrock-runtime\u0026#34;, region_name=region) body= { \u0026#34;anthropic_version\u0026#34;: \u0026#34;bedrock-2023-05-31\u0026#34;, \u0026#34;max_tokens\u0026#34;: max_tokens, \u0026#34;messages\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: [{\u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: prompt}], } ], } response = bedrock_runtime_client.invoke_model( modelId=model_id, body=json.dumps(body) ) response_body = json.loads(response[\u0026#34;body\u0026#34;].read()) outputs = response_body.get(\u0026#34;content\u0026#34;) completions = [output[\u0026#34;text\u0026#34;] for output in outputs] print(f\u0026#34;completions: {completions[0]}\u0026#34;) return completions[0] except Exception as e: raise def invoke_mistral_7b(model_id, prompt, temperature, max_tokens): try: instruction = f\u0026#34;\u0026lt;s\u0026gt;[INST] {prompt} [/INST]\u0026#34; bedrock_runtime_client = boto3.client(service_name=\u0026#34;bedrock-runtime\u0026#34;, region_name=region) body = { \u0026#34;prompt\u0026#34;: instruction, \u0026#34;max_tokens\u0026#34;: max_tokens, \u0026#34;temperature\u0026#34;: temperature, } response = bedrock_runtime_client.invoke_model( modelId=model_id, body=json.dumps(body) ) response_body = json.loads(response[\u0026#34;body\u0026#34;].read()) outputs = response_body.get(\u0026#34;outputs\u0026#34;) print(f\u0026#34;response: {outputs}\u0026#34;) completions = [output[\u0026#34;text\u0026#34;] for output in outputs] return completions[0] except Exception as e: raise def invoke_llama(model_id, prompt, temperature, max_tokens): print(f\u0026#34;Invoking llam model {model_id}\u0026#34; ) print(f\u0026#34;max_tokens {max_tokens}\u0026#34; ) try: instruction = f\u0026#34;[INST]You are a very intelligent bot with exceptional critical thinking, help me answering below question.[/INST]\u0026#34; total_prompt = f\u0026#34;{instruction}\\n{prompt}\u0026#34; print(f\u0026#34;Prompt template {total_prompt}\u0026#34; ) bedrock_runtime_client = boto3.client(service_name=\u0026#34;bedrock-runtime\u0026#34;, region_name=region) body = { \u0026#34;prompt\u0026#34;: total_prompt, \u0026#34;max_gen_len\u0026#34;: max_tokens, \u0026#34;temperature\u0026#34;: temperature, \u0026#34;top_p\u0026#34;: 0.9 } response = bedrock_runtime_client.invoke_model( modelId=model_id, body=json.dumps(body) ) response_body = json.loads(response[\u0026#34;body\u0026#34;].read()) print(f\u0026#34;response: {response_body}\u0026#34;) return response_body [\u0026#39;generation\u0026#39;] except Exception as e: raise T·ª´ tr√¨nh so·∫°n th·∫£o VSCode, ch·∫°y l·ªánh sau ƒë·ªÉ build v√† tri·ªÉn khai m√£ Lambda ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: cd ~/environment/bedrock-serverless-workshop sam build \u0026amp;\u0026amp; sam deploy B·∫°n c√≥ th·ªÉ ki·ªÉm tra l·∫°i h√†m Lambda ƒë√£ c·∫≠p nh·∫≠t th√¥ng qua B·∫£ng ƒëi·ªÅu khi·ªÉn AWS Lambda.\nTrong nhi·ªám v·ª• n√†y, b·∫°n s·∫Ω c√≥ c∆° h·ªôi l√†m vi·ªác v·ªõi c√°c m√¥ h√¨nh LLM sau, m·ªói m√¥ h√¨nh mang l·∫°i c√°c t√≠nh nƒÉng v√† ƒëi·ªÉm m·∫°nh ri√™ng bi·ªát:\nanthropic.claude-3-haiku ‚Äì Claude 3 Haiku l√† m√¥ h√¨nh nhanh nh·∫•t v√† nh·ªè g·ªçn nh·∫•t c·ªßa Anthropic, mang l·∫°i kh·∫£ nƒÉng ph·∫£n h·ªìi g·∫ßn nh∆∞ t·ª©c th√¨. ƒê√¢y l√† l·ª±a ch·ªçn l√Ω t∆∞·ªüng ƒë·ªÉ x√¢y d·ª±ng tr·∫£i nghi·ªám AI m∆∞·ª£t m√†, m√¥ ph·ªèng t∆∞∆°ng t√°c nh∆∞ con ng∆∞·ªùi. anthropic.claude-3-5-sonnet ‚Äì Claude 3.5 Sonnet l√† m√¥ h√¨nh ti√™n ti·∫øn v√† th√¥ng minh nh·∫•t c·ªßa Anthropic, th·ªÉ hi·ªán nƒÉng l·ª±c v∆∞·ª£t tr·ªôi trong nhi·ªÅu lo·∫°i t√°c v·ª• v√† ƒë√°nh gi√° kh√°c nhau. anthropic.claude-3-opus ‚Äì Opus l√† m·ªôt m√¥ h√¨nh c·ª±c k·ª≥ th√¥ng minh v·ªõi hi·ªáu su·∫•t ƒë√°ng tin c·∫≠y cho c√°c t√°c v·ª• ph·ª©c t·∫°p. N√≥ c√≥ th·ªÉ x·ª≠ l√Ω c√°c prompt m·ªü v√† t√¨nh hu·ªëng ch∆∞a t·ª´ng th·∫•y v·ªõi ƒë·ªô l∆∞u lo√°t v√† hi·ªÉu bi·∫øt gi·ªëng con ng∆∞·ªùi. S·ª≠ d·ª•ng Opus ƒë·ªÉ t·ª± ƒë·ªông h√≥a, th√∫c ƒë·∫©y nghi√™n c·ª©u v√† ph√°t tri·ªÉn trong nhi·ªÅu ng√†nh ngh·ªÅ v√† tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng. mistral.mistral-7b-instruct ‚Äì Mistral l√† m·ªôt m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn r·∫•t hi·ªáu qu·∫£, ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho c√°c t√°c v·ª• ng√¥n ng·ªØ kh·ªëi l∆∞·ª£ng l·ªõn v·ªõi ƒë·ªô tr·ªÖ th·∫•p. C√°c tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng ph·ªï bi·∫øn c·ªßa Mistral g·ªìm: t√≥m t·∫Øt vƒÉn b·∫£n, c·∫•u tr√∫c h√≥a n·ªôi dung, tr·∫£ l·ªùi c√¢u h·ªèi, v√† ho√†n th√†nh m√£ ngu·ªìn. meta.llama3-1-8b-instruct ‚Äì Llama 3.1 8B ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng gi·ªõi h·∫°n t√†i nguy√™n t√≠nh to√°n. M√¥ h√¨nh n√†y ƒë·∫∑c bi·ªát m·∫°nh ·ªü c√°c t√°c v·ª• nh∆∞ t√≥m t·∫Øt vƒÉn b·∫£n, ph√¢n lo·∫°i vƒÉn b·∫£n, ph√¢n t√≠ch c·∫£m x√∫c, v√† d·ªãch ng√¥n ng·ªØ y√™u c·∫ßu suy lu·∫≠n ƒë·ªô tr·ªÖ th·∫•p. Ki·ªÉm th·ª≠ qua giao di·ªán ng∆∞·ªùi d√πng (UI) Quay l·∫°i tr√¨nh duy·ªát v√† m·ªü trang web chatbot. N·∫øu b·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, h√£y s·ª≠ d·ª•ng th√¥ng tin ƒëƒÉng nh·∫≠p ƒë√£ l·∫•y tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ƒëƒÉng nh·∫≠p. Giao di·ªán trang web s·∫Ω hi·ªÉn th·ªã nh∆∞ sau: Nh·∫≠p b·∫•t k·ª≥ c√¢u h·ªèi n√†o v√†o √¥ Query v√† nh·∫•n n√∫t Ask Question. B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ m·ªôt s·ªë c√¢u h·ªèi m·∫´u t·ª´ khung b√™n ph·∫£i. D∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• m·ªôt c√¢u h·ªèi v√† ph·∫£n h·ªìi t·ª´ Claude 3 Haiku. B·∫°n c√≥ th·ªÉ th·ª≠ v·ªõi c√°c m√¥ h√¨nh LLM kh√°c v√† so s√°nh k·∫øt qu·∫£. List top 10 cities of VietNam by population? Ho√†n th√†nh nhi·ªám v·ª• B·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ ti·∫øp t·ª•c sang nhi·ªám v·ª• ti·∫øp theo.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/6-usingamazonkendra/",
	"title": "L·∫≠p ch·ªâ m·ª•c d·ªØ li·ªáu ngu·ªìn b·∫±ng Amazon Kendra",
	"tags": [],
	"description": "",
	"content": "Trong ki·∫øn tr√∫c RAG, Amazon Kendra c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫≠p ch·ªâ m·ª•c v√† t√¨m ki·∫øm tr√™n t·∫≠p h·ª£p t√†i li·ªáu m·∫´u ƒë∆∞·ª£c l∆∞u tr·ªØ trong Amazon S3 ho·∫∑c c√°c ngu·ªìn kh√°c. Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë∆∞a ra m·ªôt truy v·∫•n ho·∫∑c c√¢u h·ªèi, v√† Kendra s·∫Ω th·ª±c hi·ªán t√¨m ki·∫øm theo ƒë·ªô t∆∞∆°ng ƒë·ªìng tr√™n n·ªôi dung ƒë√£ ƒë∆∞·ª£c l·∫≠p ch·ªâ m·ª•c ƒë·ªÉ x√°c ƒë·ªãnh th√¥ng tin li√™n quan nh·∫•t.\nKh·∫£ nƒÉng x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n n√¢ng cao c·ªßa Kendra cho ph√©p n√≥ hi·ªÉu √Ω ƒë·ªãnh v√† truy v·∫•n c·ªßa ng∆∞·ªùi d√πng, sau ƒë√≥ truy xu·∫•t n·ªôi dung ph√π h·ª£p nh·∫•t t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·∫≠p ch·ªâ m·ª•c. ƒêi·ªÅu n√†y gi√∫p ng∆∞·ªùi d√πng nhanh ch√≥ng t√¨m ƒë∆∞·ª£c th√¥ng tin c·∫ßn thi·∫øt m√† kh√¥ng c·∫ßn ph·∫£i xem qua t·ª´ng t√†i li·ªáu m·ªôt c√°ch th·ªß c√¥ng.\nB·∫±ng c√°ch t√≠ch h·ª£p Kendra v√†o giai ƒëo·∫°n \u0026ldquo;Retrieve\u0026rdquo; trong ki·∫øn tr√∫c RAG, c√°c t·ªï ch·ª©c c√≥ th·ªÉ n√¢ng cao kh·∫£ nƒÉng t√¨m ki·∫øm v√† khai ph√° th√¥ng tin, t·ª´ ƒë√≥ h·ªó tr·ª£ t·ªët h∆°n cho vi·ªác ph√¢n t√≠ch v√† t·∫°o ra c√°c ph·∫£n h·ªìi c√≥ gi√° tr·ªã. Vi·ªác t√≠ch h·ª£p li·ªÅn m·∫°ch gi·ªØa Kendra v√† Amazon S3 gi√∫p ƒë∆°n gi·∫£n h√≥a qu√° tr√¨nh l·∫≠p ch·ªâ m·ª•c v√† qu·∫£n l√Ω n·ªôi dung, khi·∫øn Kendra tr·ªü th√†nh m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω trong h·ªá th·ªëng RAG.\nT·∫£i xu·ªëng t√†i li·ªáu m·∫´u T·∫£i v·ªÅ m·ªôt v√†i t√†i li·ªáu m·∫´u ƒë·ªÉ ki·ªÉm th·ª≠ gi·∫£i ph√°p n√†y. T√†i li·ªáu ƒë·∫ßu ti√™n l√† bi√™n b·∫£n cu·ªôc h·ªçp th√°ng 5 v√† th√°ng 9 nƒÉm 2024 c·ªßa ·ª¶y ban Th·ªã tr∆∞·ªùng M·ªü Li√™n bang (FOMC). T√†i li·ªáu th·ª© hai l√† B√°o c√°o Ph√°t tri·ªÉn B·ªÅn v·ªØng nƒÉm 2023 c·ªßa Amazon. T√†i li·ªáu th·ª© ba l√† b√°o c√°o 10-K nƒÉm 2023 c·ªßa Henry Schein, m·ªôt nh√† cung c·∫•p d·ªãch v·ª• nha khoa. B·∫°n c√≥ th·ªÉ t·∫£i v·ªÅ ho·∫∑c s·ª≠ d·ª•ng b·∫•t k·ª≥ t√†i li·ªáu n√†o ƒë·ªÉ th·ª≠ nghi·ªám, ho·∫∑c d√πng d·ªØ li·ªáu ri√™ng c·ªßa b·∫°n ƒë·ªÉ ki·ªÉm tra.\nƒê·ªÉ sao ch√©p c√°c m·∫´u prompt v√† t√†i li·ªáu m·∫´u v√†o S3 bucket, h√£y ch·∫°y l·ªánh sau:\nM·ªü tr√¨nh so·∫°n th·∫£o VSCode, sau ƒë√≥ ch·∫°y l·ªánh trong TERMINAL.\ncd ~/environment/bedrock-serverless-workshop mkdir sample-documents curl https://www.federalreserve.gov/monetarypolicy/files/monetary20240501a1.pdf --output sample-documents/monetary20240501a1.pdf curl https://www.federalreserve.gov/monetarypolicy/files/monetary20240918a1.pdf --output sample-documents/monetary20240918a1.pdf curl https://sustainability.aboutamazon.com/content/dam/sustainability-marketing-site/pdfs/reports-docs/2023-amazon-sustainability-report.pdf --output sample-documents/2023-sustainability-report-amazon.pdf curl https://investor.henryschein.com/static-files/bcc116aa-a576-4756-a722-90f5e2e22114 --output sample-documents/2023-hs1-10k.pdf T·∫£i l√™n t√†i li·ªáu m·∫´u v√† prompt templates ƒê·ªÉ sao ch√©p c√°c m·∫´u prompt v√† t√†i li·ªáu m·∫´u b·∫°n v·ª´a t·∫£i v·ªÅ l√™n S3 bucket, ch·∫°y l·ªánh sau:\ncd ~/environment/bedrock-serverless-workshop aws s3 cp sample-documents s3://$S3BucketName/sample-documents/ --recursive aws s3 cp prompt-engineering s3://$S3BucketName/prompt-engineering/ --recursive Sau khi t·∫£i l√™n th√†nh c√¥ng, m·ªü AWS S3 Console v√† truy c·∫≠p bucket. B·∫°n s·∫Ω th·∫•y giao di·ªán t∆∞∆°ng t·ª± nh∆∞ sau:\nL·∫≠p ch·ªâ m·ª•c t√†i li·ªáu m·∫´u b·∫±ng Amazon Kendra Ch·ªâ m·ª•c Amazon Kendra v√† ngu·ªìn d·ªØ li·ªáu t·ª´ Amazon S3 ƒë√£ ƒë∆∞·ª£c t·∫°o s·∫µn trong qu√° tr√¨nh thi·∫øt l·∫≠p ban ƒë·∫ßu c·ªßa workshop n√†y. Trong b∆∞·ªõc n√†y, b·∫°n s·∫Ω l·∫≠p ch·ªâ m·ª•c to√†n b·ªô t√†i li·ªáu trong th∆∞ m·ª•c sample-documents tr√™n S3.\nM·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn Amazon Kendra\n·ªû g√≥c tr√™n b√™n tr√°i giao di·ªán Kendra, ch·ªçn bi·ªÉu t∆∞·ª£ng menu ‚ò∞, sau ƒë√≥ trong b·∫£ng ƒëi·ªÅu h∆∞·ªõng ch·ªçn Indexes. Nh·∫•p v√†o t√™n c·ªßa ch·ªâ m·ª•c (index) ƒë·ªÉ m·ªü b·∫£ng ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i.\nƒê·ªÉ b·∫Øt ƒë·∫ßu l·∫≠p ch·ªâ m·ª•c to√†n b·ªô t√†i li·ªáu t·ª´ th∆∞ m·ª•c sample-documents, ch·ªçn S3DocsDataSource, sau ƒë√≥ ch·ªçn Sync now. Qu√° tr√¨nh l·∫≠p ch·ªâ m·ª•c c√≥ th·ªÉ m·∫•t v√†i ph√∫t. Vui l√≤ng ch·ªù cho ƒë·∫øn khi ho√†n t·∫•t.\n5. ƒê·ªÉ g·ª≠i truy v·∫•n ƒë·∫øn ch·ªâ m·ª•c Amazon Kendra v·ªõi m·ªôt v√†i c√¢u h·ªèi m·∫´u, trong b·∫£ng ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i, ch·ªçn Search indexed content, sau ƒë√≥ nh·∫≠p c√¢u h·ªèi.\nV√≠ d·ª• c√¢u h·ªèi:\nWhat is federal funds rate as of May 2024?? Xin ch√∫c m·ª´ng B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• v√† c√≥ th·ªÉ chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/7-rag/",
	"title": "Tr√≤ chuy·ªán RAG v·ªõi nhi·ªÅu m√¥ h√¨nh LLM",
	"tags": [],
	"description": "",
	"content": "B·∫°n ƒë√£ tri·ªÉn khai th√†nh c√¥ng ·ª©ng d·ª•ng chatbot serverless s·ª≠ d·ª•ng Amazon Bedrock v√† ƒë√£ c·∫•p quy·ªÅn truy c·∫≠p cho c√°c M√¥ h√¨nh Ng√¥n ng·ªØ L·ªõn (LLMs) c·∫ßn thi·∫øt th√¥ng qua b·∫£ng ƒëi·ªÅu khi·ªÉn Amazon Bedrock. Ngo√†i ra, b·∫°n c≈©ng ƒë√£ ho√†n t·∫•t thi·∫øt l·∫≠p Amazon Kendra.\nGi·∫£i ph√°p d·ª±a tr√™n RAG v·ªõi Amazon Bedrock v√† LangChain Gi·∫£i ph√°p trong workshop n√†y ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n ph∆∞∆°ng ph√°p Retrieval-Augmented Generation (RAG). RAG l√† m·ªôt ki·∫øn tr√∫c m√¥ h√¨nh k·∫øt h·ª£p gi·ªØa k·ªπ thu·∫≠t truy xu·∫•t v√† sinh vƒÉn b·∫£n nh·∫±m n√¢ng cao ch·∫•t l∆∞·ª£ng v√† m·ª©c ƒë·ªô ph√π h·ª£p c·ªßa n·ªôi dung ƒë∆∞·ª£c t·∫°o ra. Khi b·∫°n nh·∫≠p m·ªôt c√¢u h·ªèi v√†o √¥ vƒÉn b·∫£n, c√°c b∆∞·ªõc x·ª≠ l√Ω sau s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán ph√≠a backend ƒë·ªÉ cung c·∫•p cho b·∫°n c√¢u tr·∫£ l·ªùi d·ª±a tr√™n t√†i li·ªáu ngu·ªìn:\nRetrieval (Truy xu·∫•t): Qu√° tr√¨nh n√†y t√¨m ki·∫øm trong m·ªôt t·∫≠p h·ª£p vƒÉn b·∫£n l·ªõn ƒë·ªÉ x√°c ƒë·ªãnh th√¥ng tin ho·∫∑c ng·ªØ c·∫£nh ph√π h·ª£p. Trong b∆∞·ªõc n√†y, Amazon Kendra nh·∫≠n c√¢u h·ªèi t·ª´ y√™u c·∫ßu v√† t√¨m ki·∫øm c√°c c√¢u tr·∫£ l·ªùi c≈©ng nh∆∞ t√†i li·ªáu tham kh·∫£o li√™n quan.\nAugmentation (TƒÉng c∆∞·ªùng): Sau khi truy xu·∫•t ƒë∆∞·ª£c th√¥ng tin ph√π h·ª£p, m√¥ h√¨nh s·ª≠ d·ª•ng ng·ªØ c·∫£nh ƒë√≥ ƒë·ªÉ tƒÉng c∆∞·ªùng kh·∫£ nƒÉng sinh vƒÉn b·∫£n. ƒêi·ªÅu n√†y gi√∫p n·ªôi dung t·∫°o ra c√≥ t√≠nh li√™n quan v·ªÅ ng·ªØ c·∫£nh v√† gi√†u th√¥ng tin.\nGeneration (Sinh n·ªôi dung): Trong RAG, ƒë√¢y l√† qu√° tr√¨nh m√¥ h√¨nh t·∫°o ra vƒÉn b·∫£n m·ªõi d·ª±a tr√™n ng·ªØ c·∫£nh ƒë√£ truy xu·∫•t v√† tƒÉng c∆∞·ªùng. VƒÉn b·∫£n ƒë∆∞·ª£c sinh ra c√≥ th·ªÉ l√† c√¢u tr·∫£ l·ªùi, ph·∫£n h·ªìi ho·∫∑c gi·∫£i th√≠ch.\nLangChain: ƒê·ªÉ ƒëi·ªÅu ph·ªëi to√†n b·ªô quy tr√¨nh n√†y, workshop s·ª≠ d·ª•ng t√°c nh√¢n LangChain. C√°c l·ªõp tr·ª´u t∆∞·ª£ng linh ho·∫°t v√† b·ªô c√¥ng c·ª• to√†n di·ªán c·ªßa LangChain gi√∫p nh√† ph√°t tri·ªÉn t·∫≠n d·ª•ng t·ªëi ƒëa s·ª©c m·∫°nh c·ªßa c√°c m√¥ h√¨nh n·ªÅn t·∫£ng (Foundation Models - FMs).\nTrong t√°c v·ª• n√†y, b·∫°n s·∫Ω tri·ªÉn khai m·ªôt h√†m Lambda RAG (Retrieve, Analyze, Generate) ƒë·ªÉ cung c·∫•p tr·∫£i nghi·ªám chatbot theo ng·ªØ c·∫£nh v·ªõi t·∫≠p d·ªØ li·ªáu c·ªßa b·∫°n. C√°c t·∫≠p d·ªØ li·ªáu m·∫´u ƒë∆∞·ª£c l∆∞u tr·ªØ tr√™n Amazon S3 v√† ƒë∆∞·ª£c l·∫≠p ch·ªâ m·ª•c b·∫±ng Amazon Kendra. ƒê·ªÉ ƒëi·ªÅu ph·ªëi lu·ªìng gi·ªØa truy v·∫•n ng∆∞·ªùi d√πng, ch·ªâ m·ª•c Kendra v√† c√°c m√¥ h√¨nh LLMs, b·∫°n s·∫Ω s·ª≠ d·ª•ng LangChain l√†m c√¥ng c·ª• ƒëi·ªÅu ph·ªëi. M√£ Lambda ƒë∆∞·ª£c cung c·∫•p s·ª≠ d·ª•ng API c·ªßa LangChain ƒë·ªÉ tr·ª´u t∆∞·ª£ng h√≥a logic t√≠ch h·ª£p ph·ª©c t·∫°p n√†y.\nB·∫±ng c√°ch t·∫≠n d·ª•ng s·ª©c m·∫°nh c·ªßa Amazon Bedrock, Amazon Kendra v√† LangChain, b·∫°n c√≥ th·ªÉ x√¢y d·ª±ng m·ªôt tr·∫£i nghi·ªám chatbot li·ªÅn m·∫°ch v√† theo ng·ªØ c·∫£nh cho ng∆∞·ªùi d√πng, gi√∫p h·ªç t∆∞∆°ng t√°c v·ªõi t·∫≠p d·ªØ li·ªáu m·ªôt c√°ch t·ª± nhi√™n v√† hi·ªáu qu·∫£.\nTrong ph·∫ßn n√†y, b·∫°n s·∫Ω c·∫≠p nh·∫≠t v√† tri·ªÉn khai m·ªôt h√†m Lambda RAG. H√†m n√†y cho ph√©p tr√≤ chuy·ªán theo ng·ªØ c·∫£nh v·ªõi nhi·ªÅu m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn kh√°c nhau.\nM·ªü tr√¨nh so·∫°n th·∫£o VSCode.\nT·ª´ d·ª± √°n bedrock-serverless-workshop, m·ªü h√†m /lambdas/ragFunctions/ragfunction.py, sao ch√©p ƒëo·∫°n m√£ b√™n d∆∞·ªõi v√† c·∫≠p nh·∫≠t m√£ trong h√†m. H√†m n√†y ch·ª©a logic h·ªó tr·ª£ c√°c m√¥ h√¨nh Claude 3 (Haiku, Sonnet, v.v.), Mistral v√† Llama.\nimport os import json import boto3 from langchain_community.retrievers import AmazonKendraRetriever from langchain_aws import ChatBedrock from langchain.chains import ConversationalRetrievalChain from langchain.memory import ConversationBufferMemory from langchain.prompts import PromptTemplate from langchain.chains import RetrievalQA import traceback kendra = boto3.client(\u0026#39;kendra\u0026#39;) chain_type = \u0026#39;stuff\u0026#39; KENDRA_INDEX_ID = os.getenv(\u0026#39;KENDRA_INDEX_ID\u0026#39;) S3_BUCKET_NAME = os.environ[\u0026#34;S3_BUCKET_NAME\u0026#34;] refine_prompt_template = ( \u0026#34;Below is an instruction that describes a task. \u0026#34; \u0026#34;Write a response that appropriately completes the request.\\n\\n\u0026#34; \u0026#34;### Instruction:\\n\u0026#34; \u0026#34;This is the original question: {question}\\n\u0026#34; \u0026#34;The existing answer: {existing_answer}\\n\u0026#34; \u0026#34;Now there are some additional texts, (if needed) you can use them to improve your existing answer.\u0026#34; \u0026#34;\\n\\n\u0026#34; \u0026#34;{context_str}\\n\u0026#34; \u0026#34;\\\\nn\u0026#34; \u0026#34;Please use the new passage to further improve your answer.\\n\\n\u0026#34; \u0026#34;### Response: \u0026#34; ) initial_qa_template = ( \u0026#34;Below is an instruction that describes a task. \u0026#34; \u0026#34;Write a response that appropriately completes the request.\\n\\n\u0026#34; \u0026#34;### Instruction:\\n\u0026#34; \u0026#34;The following is background knowledgeÔºö\\n\u0026#34; \u0026#34;{context_str}\u0026#34; \u0026#34;\\n\u0026#34; \u0026#34;Please answer this question based on the background knowledge provided aboveÔºö{question}„ÄÇ\\n\\n\u0026#34; \u0026#34;### Response: \u0026#34; ) def lambda_handler(event, context): print(f\u0026#34;Event is: {event}\u0026#34;) event_body = json.loads(event[\u0026#34;body\u0026#34;]) question = event_body[\u0026#34;query\u0026#34;] print(f\u0026#34;Query is: {question}\u0026#34;) model_id = event_body[\u0026#34;model_id\u0026#34;] temperature = event_body[\u0026#34;temperature\u0026#34;] max_tokens = event_body[\u0026#34;max_tokens\u0026#34;] response = \u0026#39;\u0026#39; status_code = 200 PROMPT_TEMPLATE = \u0026#39;prompt-engineering/claude-prompt-template.txt\u0026#39; try: if model_id == \u0026#39;mistral.mistral-7b-instruct-v0:2\u0026#39;: llm = get_mistral_llm(model_id,temperature,max_tokens) PROMPT_TEMPLATE = \u0026#39;prompt-engineering/mistral-prompt-template.txt\u0026#39; elif model_id == \u0026#39;meta.llama3-1-8b-instruct-v1:0\u0026#39;: llm = get_llama_llm(model_id,temperature,max_tokens) PROMPT_TEMPLATE = \u0026#39;prompt-engineering/llama-prompt-template.txt\u0026#39; else: llm = get_claude_llm(model_id,temperature,max_tokens) PROMPT_TEMPLATE = \u0026#39;prompt-engineering/claude-prompt-template.txt\u0026#39; # Read the prompt template from S3 bucket s3 = boto3.resource(\u0026#39;s3\u0026#39;) obj = s3.Object(S3_BUCKET_NAME, PROMPT_TEMPLATE) prompt_template = obj.get()[\u0026#39;Body\u0026#39;].read().decode(\u0026#39;utf-8\u0026#39;) print(f\u0026#34;prompt template: {prompt_template}\u0026#34;) retriever = AmazonKendraRetriever(kendra_client=kendra,index_id=KENDRA_INDEX_ID) if chain_type == \u0026#34;stuff\u0026#34;: PROMPT = PromptTemplate( template=prompt_template, input_variables=[\u0026#34;context\u0026#34;, \u0026#34;question\u0026#34;] ) chain_type_kwargs = {\u0026#34;prompt\u0026#34;: PROMPT} qa = RetrievalQA.from_chain_type( llm=llm, chain_type=\u0026#34;stuff\u0026#34;, retriever=retriever, return_source_documents=True, chain_type_kwargs=chain_type_kwargs) response = qa(question, return_only_outputs=False) elif chain_type == \u0026#34;refine\u0026#34;: refine_prompt = PromptTemplate( input_variables=[\u0026#34;question\u0026#34;, \u0026#34;existing_answer\u0026#34;, \u0026#34;context_str\u0026#34;], template=refine_prompt_template, ) initial_qa_prompt = PromptTemplate( input_variables=[\u0026#34;context_str\u0026#34;, \u0026#34;question\u0026#34;], template=prompt_template, ) chain_type_kwargs = {\u0026#34;question_prompt\u0026#34;: initial_qa_prompt, \u0026#34;refine_prompt\u0026#34;: refine_prompt} qa = RetrievalQA.from_chain_type( llm=llm, chain_type=\u0026#34;refine\u0026#34;, retriever=retriever, return_source_documents=True, chain_type_kwargs=chain_type_kwargs) response = qa(question, return_only_outputs=False) print(\u0026#39;Response\u0026#39;, response) source_documents = response.get(\u0026#39;source_documents\u0026#39;) source_docs = [] previous_source = None previous_score = None response_data = [] #if chain_type == \u0026#34;stuff\u0026#34;: for source_doc in source_documents: source = source_doc.metadata[\u0026#39;source\u0026#39;] score = source_doc.metadata[\u0026#34;score\u0026#34;] if source != previous_source or score != previous_score: source_data = { \u0026#34;source\u0026#34;: source, \u0026#34;score\u0026#34;: score } response_data.append(source_data) previous_source = source previous_score = score response_with_metadata = { \u0026#34;answer\u0026#34;: response.get(\u0026#39;result\u0026#39;), \u0026#34;source_documents\u0026#34;: response_data } return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps(response_with_metadata) } except Exception as e: print(f\u0026#34;An unexpected error occurred: {str(e)}\u0026#34;) stack_trace = traceback.format_exc() print(f\u0026#34;stack trace: {stack_trace}\u0026#34;) print(f\u0026#34;error: {str(e)}\u0026#34;) response = str(e) return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: response}) } def get_claude_llm(model_id, temperature, max_tokens): model_kwargs = { \u0026#34;max_tokens\u0026#34;: max_tokens, \u0026#34;temperature\u0026#34;: temperature, \u0026#34;top_k\u0026#34;: 50, \u0026#34;top_p\u0026#34;: 0.95 } llm = ChatBedrock(model_id=model_id, model_kwargs=model_kwargs) return llm def get_llama_llm(model_id, temperature, max_tokens): model_kwargs = { \u0026#34;max_gen_len\u0026#34;: max_tokens, \u0026#34;temperature\u0026#34;: temperature, \u0026#34;top_p\u0026#34;: 0.9 } llm = ChatBedrock(model_id=model_id, model_kwargs=model_kwargs) return llm def get_mistral_llm(model_id, temperature, max_tokens): model_kwargs = { \u0026#34;max_tokens\u0026#34;: max_tokens, \u0026#34;temperature\u0026#34;: temperature, \u0026#34;top_k\u0026#34;: 50, \u0026#34;top_p\u0026#34;: 0.9 } llm = ChatBedrock(model_id=model_id, model_kwargs=model_kwargs) return llm def get_memory(): memory = ConversationBufferMemory( memory_key=\u0026#34;chat_history\u0026#34;, input_key=\u0026#34;question\u0026#34;, output_key=\u0026#34;answer\u0026#34;, return_messages=True ) return memory T·ª´ terminal c·ªßa VSCode, ch·∫°y l·ªánh sau ƒë·ªÉ build v√† tri·ªÉn khai v·ªõi m√£ Lambda ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: cd ~/environment/bedrock-serverless-workshop sam build \u0026amp;\u0026amp; sam deploy Trong t√°c v·ª• n√†y, b·∫°n s·∫Ω c√≥ c∆° h·ªôi l√†m vi·ªác v·ªõi c√°c m√¥ h√¨nh LLM sau, m·ªói m√¥ h√¨nh ƒë·ªÅu mang ƒë·∫øn c√°c t√≠nh nƒÉng v√† th·∫ø m·∫°nh ri√™ng bi·ªát:\nanthropic.claude-3-haiku - Claude 3 Haiku l√† m√¥ h√¨nh nhanh nh·∫•t v√† nh·ªè g·ªçn nh·∫•t c·ªßa Anthropic, mang l·∫°i kh·∫£ nƒÉng ph·∫£n h·ªìi g·∫ßn nh∆∞ t·ª©c th√¨. Haiku l√† l·ª±a ch·ªçn t·ªëi ∆∞u ƒë·ªÉ x√¢y d·ª±ng tr·∫£i nghi·ªám AI li·ªÅn m·∫°ch, m√¥ ph·ªèng t∆∞∆°ng t√°c t·ª± nhi√™n nh∆∞ con ng∆∞·ªùi. anthropic.claude-3-5-sonnet - Claude 3.5 Sonnet l√† m√¥ h√¨nh ti√™n ti·∫øn v√† th√¥ng minh nh·∫•t c·ªßa Anthropic, th·ªÉ hi·ªán nƒÉng l·ª±c v∆∞·ª£t tr·ªôi trong nhi·ªÅu t√°c v·ª• v√† b√†i ƒë√°nh gi√° kh√°c nhau. anthropic.claude-3-opus - Claude 3 Opus l√† m·ªôt m√¥ h√¨nh c·ª±c k·ª≥ th√¥ng minh v·ªõi hi·ªáu nƒÉng ·ªïn ƒë·ªãnh tr√™n c√°c t√°c v·ª• ph·ª©c t·∫°p. Opus c√≥ th·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu m·ªü, ch∆∞a t·ª´ng th·∫•y tr∆∞·ªõc ƒë√≥ v·ªõi ƒë·ªô tr√¥i ch·∫£y cao v√† kh·∫£ nƒÉng hi·ªÉu gi·ªëng con ng∆∞·ªùi. H√£y s·ª≠ d·ª•ng Opus ƒë·ªÉ t·ª± ƒë·ªông h√≥a c√¥ng vi·ªác, tƒÉng t·ªëc nghi√™n c·ª©u v√† ph√°t tri·ªÉn trong nhi·ªÅu lƒ©nh v·ª±c v√† ng√†nh ngh·ªÅ kh√°c nhau. mistral.mistral-7b-instruct - Mistral l√† m·ªôt m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn hi·ªáu qu·∫£ cao, ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho c√°c t√°c v·ª• ng√¥n ng·ªØ y√™u c·∫ßu dung l∆∞·ª£ng l·ªõn v√† ƒë·ªô tr·ªÖ th·∫•p. C√°c tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng ph·ªï bi·∫øn c·ªßa Mistral bao g·ªìm: t√≥m t·∫Øt vƒÉn b·∫£n, c·∫•u tr√∫c l·∫°i th√¥ng tin, tr·∫£ l·ªùi c√¢u h·ªèi v√† ho√†n th√†nh m√£ ngu·ªìn. meta.llama3-1-8b-instruct - Llama 3.1 8B ph√π h·ª£p nh·∫•t v·ªõi c√°c h·ªá th·ªëng c√≥ t√†i nguy√™n t√≠nh to√°n gi·ªõi h·∫°n. M√¥ h√¨nh n√†y ƒë·∫∑c bi·ªát m·∫°nh trong c√°c t√°c v·ª• nh∆∞ t√≥m t·∫Øt vƒÉn b·∫£n, ph√¢n lo·∫°i vƒÉn b·∫£n, ph√¢n t√≠ch c·∫£m x√∫c v√† d·ªãch ng√¥n ng·ªØ v·ªõi y√™u c·∫ßu suy lu·∫≠n c√≥ ƒë·ªô tr·ªÖ th·∫•p. Quay l·∫°i tr√¨nh duy·ªát v√† m·ªü trang web chatbot. Nh·∫•p v√†o li√™n k·∫øt RAG Chat with LLMs. Giao di·ªán trang web s·∫Ω hi·ªÉn th·ªã nh∆∞ sau: ƒê·∫∑t b·∫•t k·ª≥ c√¢u h·ªèi n√†o b·∫±ng c√°ch nh·∫≠p v√†o √¥ Query v√† nh·∫•n n√∫t Ask Question. B·∫°n c√≥ th·ªÉ th·ª≠ m·ªôt c√¢u h·ªèi m·∫´u ·ªü b·∫£ng b√™n ph·∫£i. D∆∞·ªõi ƒë√¢y l√† m·ªôt v√≠ d·ª• v·ªÅ c√¢u h·ªèi v√† ph·∫£n h·ªìi t·ª´ Claude 3 Haiku. B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ v·ªõi c√°c m√¥ h√¨nh LLM kh√°c v√† so s√°nh k·∫øt qu·∫£. What is federal funds rate as of September 2024? "
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/8-promptengineering/",
	"title": "K·ªπ thu·∫≠t thi·∫øt k·∫ø Prompt",
	"tags": [],
	"description": "",
	"content": "K·ªπ thu·∫≠t thi·∫øt k·∫ø prompt (prompt engineering) l√† m·ªôt y·∫øu t·ªë then ch·ªët trong ki·∫øn tr√∫c Retrieval-Augmented Generation (RAG), v√¨ n√≥ ƒë√≥ng vai tr√≤ quan tr·ªçng trong t·ª´ng giai ƒëo·∫°n c·ªßa quy tr√¨nh.\nTrong giai ƒëo·∫°n Truy xu·∫•t (Retrieval), prompt engineering ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ra c√°c truy v·∫•n hi·ªáu qu·∫£ nh·∫±m t√¨m ki·∫øm th√¥ng tin li√™n quan nh·∫•t t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu, ch·∫≥ng h·∫°n nh∆∞ t√†i li·ªáu Amazon S3 ƒë√£ ƒë∆∞·ª£c l·∫≠p ch·ªâ m·ª•c b·ªüi Amazon Kendra, ƒë·ªìng th·ªùi ph·∫£n √°nh ch√≠nh x√°c √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng.\nTrong giai ƒëo·∫°n Ph√¢n t√≠ch (Analysis), prompt gi√∫p ƒë·ªãnh h∆∞·ªõng vi·ªác x·ª≠ l√Ω v√† tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt t·ª´ d·ªØ li·ªáu ƒë√£ truy xu·∫•t, b·∫±ng c√°ch x√°c ƒë·ªãnh lo·∫°i ph√¢n t√≠ch, m·ª©c ƒë·ªô chi ti·∫øt v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ mong mu·ªën.\nCu·ªëi c√πng, trong giai ƒëo·∫°n Sinh n·ªôi dung (Generation), prompt engineering l√† y·∫øu t·ªë thi·∫øt y·∫øu ƒë·ªÉ khai th√°c t·ªëi ƒëa s·ª©c m·∫°nh c·ªßa c√°c m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn nh∆∞ Claude 3 Sonnet nh·∫±m t·∫°o ra c√°c ph·∫£n h·ªìi m·∫°ch l·∫°c, ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh v√† c·ª• th·ªÉ theo nhi·ªám v·ª•, cung c·∫•p ƒë·∫ßy ƒë·ªß ng·ªØ c·∫£nh, h∆∞·ªõng d·∫´n v√† nguy√™n t·∫Øc c·∫ßn thi·∫øt.\nB·∫±ng c√°ch th√†nh th·∫°o k·ªπ thu·∫≠t thi·∫øt k·∫ø prompt, ng∆∞·ªùi d√πng c√≥ th·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t c·ªßa ki·∫øn tr√∫c RAG, ƒë·∫£m b·∫£o r·∫±ng th√¥ng tin ƒë∆∞·ª£c truy xu·∫•t l√† ch√≠nh x√°c, ph√¢n t√≠ch c√≥ chi·ªÅu s√¢u v√† ph·∫£n h·ªìi ƒë∆∞·ª£c sinh ra gi·∫£i quy·∫øt ƒë√∫ng nhu c·∫ßu c·ªßa ng∆∞·ªùi d√πng.\nTrong t√°c v·ª• n√†y, b·∫°n s·∫Ω tinh ch·ªânh prompt d√†nh cho m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn Claude 3 Sonnet. B·∫°n s·∫Ω th·ª≠ nghi·ªám xem ph·∫£n h·ªìi thay ƒë·ªïi nh∆∞ th·∫ø n√†o khi b·∫°n cung c·∫•p c√°c m·∫´u prompt kh√°c nhau.\nBan ƒë·∫ßu, b·∫°n s·∫Ω ƒë·∫∑t m·ªôt c√¢u h·ªèi v·ªõi prompt c√≥ c·∫•u tr√∫c l·ªèng l·∫ªo, ƒëi·ªÅu n√†y c√≥ th·ªÉ khi·∫øn m√¥ h√¨nh LLM ƒëi ch·ªách kh·ªèi ng·ªØ c·∫£nh v√† t·∫°o ra ph·∫£n h·ªìi kh√¥ng nh∆∞ mong mu·ªën. Khi b·∫°n d·∫ßn c·∫£i thi·ªán prompt, ph·∫£n h·ªìi s·∫Ω ng√†y c√†ng b√°m s√°t k·∫øt qu·∫£ mong ƒë·ª£i v√† gi·∫£m thi·ªÉu hi·ªán t∆∞·ª£ng \u0026ldquo;·∫£o gi√°c\u0026rdquo; (hallucination).\nPh·∫ßn n√†y v·∫´n thu·ªôc ki·∫øn tr√∫c RAG v√† s·∫Ω s·ª≠ d·ª•ng c√πng ngu·ªìn d·ªØ li·ªáu nh∆∞ trong t√°c v·ª• tr∆∞·ªõc.\nQuay l·∫°i tr√¨nh duy·ªát v√† m·ªü trang web chatbot. Nh·∫•p v√†o li√™n k·∫øt Prompt Engineering. Giao di·ªán trang web s·∫Ω hi·ªÉn th·ªã nh∆∞ sau:\nTh·ª≠ ƒë·∫∑t m·ªôt c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn c√°c t√†i li·ªáu ngu·ªìn m√† b·∫°n ƒë√£ l·∫≠p ch·ªâ m·ª•c tr∆∞·ªõc ƒë√≥.\nTell me a story about a fox and tiger, the story must be for a 5 year old and under 100 words. ƒê·ªëi v·ªõi m·∫´u prompt, sao ch√©p ƒëo·∫°n prompt sau v√† d√°n v√†o √¥ Prompt Template. ƒê√¢y l√† m·ªôt prompt c√≥ c·∫•u tr√∫c l·ªèng l·∫ªo, kh√¥ng cung c·∫•p b·∫•t k·ª≥ h∆∞·ªõng d·∫´n hay ch·ªâ d·∫´n c·ª• th·ªÉ n√†o cho m√¥ h√¨nh Claude 3.5 Sonnet. {context} and {question} B·∫°n r·∫•t c√≥ th·ªÉ s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt ph·∫£n h·ªìi t∆∞∆°ng t·ª± nh∆∞ h√¨nh b√™n d∆∞·ªõi. Tuy nhi√™n, ph·∫£n h·ªìi n√†y kh√¥ng h·ªÅ t·ªìn t·∫°i trong b·∫•t k·ª≥ t√†i li·ªáu ngu·ªìn n√†o. Do c·∫•u tr√∫c prompt y·∫øu, m√¥ h√¨nh ƒë√£ t·∫°o ra ph·∫£n h·ªìi \u0026ldquo;·∫£o\u0026rdquo; (hallucinated), t·ª©c l√† m·ªôt n·ªôi dung kh√¥ng d·ª±a tr√™n ng·ªØ c·∫£nh ho·∫∑c th√¥ng tin ƒë√£ ƒë∆∞·ª£c cung c·∫•p. B√¢y gi·ªù, h√£y c·∫≠p nh·∫≠t prompt v·ªõi phi√™n b·∫£n ƒë√£ ƒë∆∞·ª£c tinh ch·ªânh b√™n d∆∞·ªõi. V·ªõi prompt ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán n√†y, b·∫°n c√≥ th·ªÉ k·ª≥ v·ªçng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi ƒë√∫ng nh∆∞ mong ƒë·ª£i. Human: You are an intelligent AI advisor, and provide answers to questions by using fact based information. Use the following pieces of information to provide a concise answer to the question enclosed in \u0026lt;question\u0026gt; tags. Look for the contextual information enclosed in \u0026lt;context\u0026gt; tags. If you don\u0026#39;t know the answer, just say that you don\u0026#39;t know, don\u0026#39;t try to make up an answer. \u0026lt;context\u0026gt;{context}\u0026lt;/context\u0026gt; \u0026lt;question\u0026gt;{question}\u0026lt;/question\u0026gt; The response should be specific and use facts only. Assistant: Quan s√°t ph·∫£n h·ªìi. L·∫ßn n√†y, thay v√¨ t·∫°o ra th√¥ng tin \u0026ldquo;·∫£o\u0026rdquo;, m√¥ h√¨nh ƒë√£ nh·∫≠n bi·∫øt r·∫±ng kh√¥ng c√≥ ng·ªØ c·∫£nh li√™n quan n√†o ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi. ƒêi·ªÅu n√†y ch·ªß y·∫øu l√† nh·ªù v√†o vi·ªác prompt ƒë√£ ƒë∆∞·ª£c ch·ªâ d·∫´n r√µ r√†ng v√† c·ª• th·ªÉ, t·ª´ ƒë√≥ d·∫´n ƒë·∫øn k·∫øt qu·∫£ ƒë√∫ng nh∆∞ mong ƒë·ª£i. Cu·ªëi c√πng, h√£y th·ª≠ ƒë·∫∑t m·ªôt c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn t·∫≠p ki·∫øn th·ª©c c·ªßa b·∫°n v√† quan s√°t ph·∫£n h·ªìi. Ph·∫£n h·ªìi tr√¥ng c√≥ t√≠nh ch√≠nh x√°c cao h∆°n v√† ƒë∆∞·ª£c tr√¨nh b√†y r√µ r√†ng h∆°n. What is federal funds rate as of May 2024? B·∫°n c√≥ th·ªÉ th·ª≠ nghi·ªám v·ªõi c√°c c√¢u h·ªèi v√† prompt kh√°c nhau cho ƒë·∫øn khi nh·∫≠n ƒë∆∞·ª£c c√°c ph·∫£n h·ªìi ng·∫Øn g·ªçn v√† nh·∫•t qu√°n. K·ªπ thu·∫≠t thi·∫øt k·∫ø prompt l√† m·ªôt qu√° tr√¨nh l·∫∑p ƒëi l·∫∑p l·∫°i, v√† b·∫°n c√≥ th·ªÉ s·∫Ω c·∫ßn th·ª≠ nhi·ªÅu l·ª±a ch·ªçn kh√°c nhau cho ƒë·∫øn khi ph·∫£n h·ªìi ph√π h·ª£p v·ªõi ti√™u ch√≠ mong mu·ªën c·ªßa b·∫°n.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/9-knowledgebases/9.1-createknowledgebase/",
	"title": "T·∫°o v√† Ki·ªÉm th·ª≠ Knowledge Base",
	"tags": [],
	"description": "",
	"content": "Vi·ªác t·∫°o Amazon Bedrock Knowledge Base gi√∫p t√≠ch h·ª£p d·ªØ li·ªáu ƒë·ªôc quy·ªÅn v√†o ·ª©ng d·ª•ng AI b·∫±ng c√°ch s·ª≠ d·ª•ng k·ªπ thu·∫≠t RAG (Retrieval Augmented Generation). Qu√° tr√¨nh n√†y chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu th√†nh c√°c vector embedding b·∫±ng c√°c m√¥ h√¨nh nh∆∞ Amazon Titan Embeddings, sau ƒë√≥ l∆∞u tr·ªØ trong c∆° s·ªü d·ªØ li·ªáu vector nh∆∞ OpenSearch Serverless. Khi ho√†n t·∫•t, Knowledge Base c√≥ th·ªÉ ƒë∆∞·ª£c truy v·∫•n ƒë·ªÉ l·∫•y th√¥ng tin li√™n quan, t·ª´ ƒë√≥ b·ªï sung th√™m ng·ªØ c·∫£nh cho c√°c prompt g·ª≠i ƒë·∫øn m√¥ h√¨nh n·ªÅn.\nT·∫°o Knowledge Base M·ªü Amazon Bedrock console. ·ªû g√≥c tr√™n b√™n tr√°i, ch·ªçn bi·ªÉu t∆∞·ª£ng menu ‚ò∞. Trong thanh ƒëi·ªÅu h∆∞·ªõng, ch·ªçn Knowledge Bases.\nCh·ªçn Create knowledge base, sau ƒë√≥ ch·ªçn Knowledge base with vector store\nGi·ªØ nguy√™n t√™n m·∫∑c ƒë·ªãnh.\n·ªû ph·∫ßn IAM permissions, ch·ªçn Use an existing role. Trong danh s√°ch, ch·ªçn role xxxx-BedrockExecutionRoleForKBs-xxxx.\nCh·ªçn Amazon S3 l√†m ngu·ªìn d·ªØ li·ªáu. Ch·ªçn Next. Ch·ªçn Browse S3. Ch·ªçn bucket xxxx-s3bucket-xxxx v√† th∆∞ m·ª•c sample-documents.\nGi·ªØ nguy√™n c·∫•u h√¨nh chia ƒëo·∫°n vƒÉn b·∫£n m·∫∑c ƒë·ªãnh. Ch·ªçn Next. Trong ph·∫ßn Embeddings model, ch·ªçn Titan Text Embeddings v2. Trong ph·∫ßn Vector database, ch·ªçn Quick create\u0026hellip;\n·ªû ph·∫ßn Vector store, ch·ªçn Amazon OpenSearch Serverless\nCh·ªçn Create knowledge base. Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t ƒë·ªÉ ho√†n t·∫•t.\nƒê·ªìng b·ªô ngu·ªìn d·ªØ li·ªáu v·ªõi Knowledge Base Trong ph·∫ßn Data source, ch·ªçn ngu·ªìn d·ªØ li·ªáu c·ªßa b·∫°n (knowledge-base-quick-\u0026hellip;). Ch·ªçn n√∫t Sync.\nSau v√†i gi√¢y, Knowledge Base s·∫Ω s·∫µn s√†ng ƒë·ªÉ ki·ªÉm th·ª≠. Ki·ªÉm th·ª≠ Knowledge Base Ch·ªçn Knowledge Base c·ªßa b·∫°n, sau ƒë√≥ ch·ªçn n√∫t Test knowledge base.\n·ªû khung b√™n ph·∫£i, ch·ªçn Select model.\nTrong c·ª≠a s·ªï Select model, ch·ªçn Claude 3 Haiku, r·ªìi ch·ªçn Apply.\n(L∆∞u √Ω: B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ nghi·ªám v·ªõi c√°c m√¥ h√¨nh kh√°c n·∫øu ch√∫ng ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.)\nNh·∫≠p c√¢u h·ªèi sau v√†o √¥ Enter your message here:\nWhat are Amazon sustainability goals by year 2040? Ch·ªçn Run.\nB·∫°n s·∫Ω th·∫•y ph·∫£n h·ªìi nh∆∞ h√¨nh d∆∞·ªõi.\nB·∫°n h√£y kh√°m ph√° kh·∫£ nƒÉng c·ªßa Knowledge Base b·∫±ng c√°ch ƒë·∫∑t nhi·ªÅu c√¢u h·ªèi kh√°c nhau. M·ªôt t√≠nh nƒÉng ƒë√°ng ch√∫ √Ω l√† kh·∫£ nƒÉng ghi nh·ªõ ng·ªØ c·∫£nh trong su·ªët cu·ªôc h·ªôi tho·∫°i. ƒêi·ªÅu n√†y cho ph√©p b·∫°n h·ªèi ti·∫øp n·ªëi t·ª´ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥, gi√∫p truy v·∫•n s√¢u h∆°n v√† khai th√°c th√¥ng tin chi ti·∫øt h∆°n t·ª´ d·ªØ li·ªáu c·ªßa b·∫°n.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/9-knowledgebases/9.2-integrateknowledgebase/",
	"title": "T√≠ch h·ª£p Knowledge Base v·ªõi Lambda Function",
	"tags": [],
	"description": "",
	"content": "Trong t√°c v·ª• n√†y, b·∫°n s·∫Ω t√≠ch h·ª£p Amazon Bedrock Knowledge Base v·ªõi m·ªôt AWS Lambda function, s·ª≠ d·ª•ng thi·∫øt l·∫≠p API Gateway hi·ªán c√≥.\nM·ª•c ti√™u l√† thi·∫øt l·∫≠p m·ªôt Lambda function c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi Knowledge Base v√† k·∫øt n·ªëi t·ªõi endpoint API ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc.\nVi·ªác t√≠ch h·ª£p n√†y cho ph√©p giao di·ªán ng∆∞·ªùi d√πng (UI) hi·ªán c√≥ c√≥ th·ªÉ giao ti·∫øp v·ªõi Knowledge Base th√¥ng qua ki·∫øn tr√∫c serverless, gi√∫p truy v·∫•n v√† l·∫•y th√¥ng tin hi·ªáu qu·∫£ b·∫±ng k·ªπ thu·∫≠t RAG.\nB·∫±ng c√°ch t·∫≠n d·ª•ng API Gateway ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v√† tri·ªÉn khai Lambda function, b·∫°n s·∫Ω ho√†n thi·ªán ph·∫ßn backend, cho ph√©p ng∆∞·ªùi d√πng truy c·∫≠p v√†o s·ª©c m·∫°nh c·ªßa Knowledge Base th√¥ng qua giao di·ªán web quen thu·ªôc, ƒë·ªìng th·ªùi duy tr√¨ kh·∫£ nƒÉng m·ªü r·ªông v√† t√≠nh linh ho·∫°t c·ªßa gi·∫£i ph√°p cloud-native.\n‚öôÔ∏è Thi·∫øt l·∫≠p AWS Lambda Function Lambda function ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai tr∆∞·ªõc ƒë√≥ trong qu√° tr√¨nh tri·ªÉn khai SAM ·ªü B∆∞·ªõc 2.\nTrong b∆∞·ªõc n√†y, b·∫°n s·∫Ω c·∫≠p nh·∫≠t m√£ ngu·ªìn cho function v√† th√™m bi·∫øn m√¥i tr∆∞·ªùng ch·ª©a Knowledge Base ID.\nC√°c thay ƒë·ªïi n√†y cho ph√©p Lambda function t∆∞∆°ng t√°c hi·ªáu qu·∫£ v·ªõi Knowledge Base.\n‚ÑπÔ∏è Note\nTr∆∞·ªõc khi ti·∫øp t·ª•c, ƒë·∫£m b·∫£o r·∫±ng qu√° tr√¨nh t·∫°o Knowledge Base ƒë√£ ho√†n t·∫•t.\nB∆∞·ªõc n√†y y√™u c·∫ßu s·ª≠ d·ª•ng Knowledge Base ID nh∆∞ m·ªôt bi·∫øn m√¥i tr∆∞·ªùng cho Lambda.\nH√£y x√°c minh tr·∫°ng th√°i c·ªßa Knowledge Base b·∫°n ƒë√£ t·∫°o ·ªü b∆∞·ªõc tr∆∞·ªõc v√† ch·ªâ ti·∫øp t·ª•c khi n√≥ ƒë√£ ho·∫°t ƒë·ªông ƒë·∫ßy ƒë·ªß.\nM·ªü tr√¨nh so·∫°n th·∫£o VSCode. Trong th∆∞ m·ª•c d·ª± √°n bedrock-serverless-workshop, m·ªü file /lambdas/llmFunctions/kbfunction.py, sao ch√©p ƒëo·∫°n m√£ d∆∞·ªõi ƒë√¢y v√† c·∫≠p nh·∫≠t v√†o file. Function n√†y ch·ª©a logic g·ªçi t·ªõi Knowledge Base. import os import json import boto3 import traceback region = boto3.session.Session().region_name KB_ID = os.environ[\u0026#34;KB_ID\u0026#34;] def lambda_handler(event, context): boto3_version = boto3.__version__ print(f\u0026#34;Boto3 version: {boto3_version}\u0026#34;) print(f\u0026#34;Event is: {event}\u0026#34;) event_body = json.loads(event[\u0026#34;body\u0026#34;]) prompt = event_body[\u0026#34;query\u0026#34;] model_id = event_body[\u0026#34;model_id\u0026#34;] response = \u0026#39;\u0026#39; status_code = 200 try: model_arn = \u0026#39;arn:aws:bedrock:\u0026#39;+region+\u0026#39;::foundation-model/\u0026#39;+model_id print(f\u0026#34;Model arn: {model_arn}\u0026#34;) response = retrieveAndGenerate(prompt, model_arn)[\u0026#34;output\u0026#34;][\u0026#34;text\u0026#34;] return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;answer\u0026#39;: response}) } except Exception as e: print(f\u0026#34;An unexpected error occurred: {str(e)}\u0026#34;) stack_trace = traceback.format_exc() print(stack_trace) return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: str(e)}) } def retrieveAndGenerate(prompt, model_arn): bedrock_agent_runtime = boto3.client( service_name = \u0026#34;bedrock-agent-runtime\u0026#34;) return bedrock_agent_runtime.retrieve_and_generate( input={ \u0026#39;text\u0026#39;: prompt }, retrieveAndGenerateConfiguration={ \u0026#39;type\u0026#39;: \u0026#39;KNOWLEDGE_BASE\u0026#39;, \u0026#39;knowledgeBaseConfiguration\u0026#39;: { \u0026#39;knowledgeBaseId\u0026#39;: KB_ID, \u0026#39;modelArn\u0026#39;: model_arn } } ) Ch·∫°y c√°c l·ªánh sau ƒë·ªÉ truy xu·∫•t Knowledge Base ID v√† c·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng c·ªßa h√†m Lambda: export KB_ID=$(aws bedrock-agent list-knowledge-bases | jq -r \u0026#39;.knowledgeBaseSummaries[0].knowledgeBaseId\u0026#39;) echo \u0026#34;Knowledge Base ID: $KB_ID\u0026#34; sed -Ei \u0026#34;s|copy_kb_id|${KB_ID}|g\u0026#34; ./template.yaml M·ªü terminal trong VSCode, ch·∫°y l·ªánh sau ƒë·ªÉ bi√™n d·ªãch v√† tri·ªÉn khai v·ªõi m√£ Lambda ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: cd ~/environment/bedrock-serverless-workshop sam build \u0026amp;\u0026amp; sam deploy H√†m Lambda ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p th√†nh c√¥ng v·ªõi Amazon Bedrock Knowledge Base c·ªßa b·∫°n. Vi·ªác t√≠ch h·ª£p n√†y cho ph√©p h√†m Lambda t∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi Knowledge Base, gi√∫p truy xu·∫•t v√† x·ª≠ l√Ω th√¥ng tin t·ª´ d·ªØ li·ªáu ƒë·ªôc quy·ªÅn c·ªßa b·∫°n.\nüß™ Ki·ªÉm tra Knowledge Base b·∫±ng giao di·ªán ng∆∞·ªùi d√πng Quay l·∫°i tr√¨nh duy·ªát v√† m·ªü trang web c·ªßa chatbot.\nN·∫øu b·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, h√£y s·ª≠ d·ª•ng th√¥ng tin ƒëƒÉng nh·∫≠p m√† b·∫°n ƒë√£ l·∫•y tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ƒëƒÉng nh·∫≠p.\nCh·ªçn t√πy ch·ªçn RAG with Knowledge Bases t·ª´ menu.\nƒê·∫∑t m·ªôt c√¢u h·ªèi ‚Äî b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√¢u h·ªèi m·∫´u ·ªü b·∫£ng b√™n ph·∫£i. D∆∞·ªõi ƒë√¢y l√† m·ªôt c√¢u h·ªèi m·∫´u v√† ph·∫£n h·ªìi t·ª´ Claude 3.5 Sonnet. B·∫°n c√≥ th·ªÉ th·ª≠ v·ªõi c√°c m√¥ h√¨nh LLM kh√°c v√† so s√°nh k·∫øt qu·∫£.\nWhat are Amazon sustainability goals by year 2040? Nhi·ªám v·ª• n√†y ƒë√£ h∆∞·ªõng d·∫´n b·∫°n quy tr√¨nh t·∫°o v√† t√≠ch h·ª£p Amazon Bedrock Knowledge Base v·ªõi AWS Lambda v√† API Gateway.\nB·∫°n ƒë√£ thi·∫øt l·∫≠p th√†nh c√¥ng ki·∫øn tr√∫c serverless s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë·ªôc quy·ªÅn c·ªßa t·ªï ch·ª©c ƒë·ªÉ n√¢ng cao c√°c ·ª©ng d·ª•ng s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o.\nB·∫±ng c√°ch k·∫øt n·ªëi Knowledge Base v·ªõi Lambda v√† s·ª≠ d·ª•ng API Gateway hi·ªán c√≥, b·∫°n ƒë√£ t·∫°o ra m·ªôt backend m·∫°nh m·∫Ω c√≥ kh·∫£ nƒÉng x·ª≠ l√Ω truy v·∫•n, truy xu·∫•t th√¥ng tin li√™n quan v√† t·∫°o ra ph·∫£n h·ªìi theo ng·ªØ c·∫£nh.\nVi·ªác t√≠ch h·ª£p n√†y m·ªü ra nhi·ªÅu kh·∫£ nƒÉng ƒë·ªÉ ph√°t tri·ªÉn c√°c ·ª©ng d·ª•ng th√¥ng minh ‚Äî t·ª´ chatbot n√¢ng cao ƒë·∫øn giao di·ªán t√¨m ki·∫øm tinh vi ‚Äî ƒë·ªìng th·ªùi v·∫´n ƒë·∫£m b·∫£o b·∫£o m·∫≠t d·ªØ li·ªáu v√† kh·∫£ nƒÉng m·ªü r·ªông.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/9-knowledgebases/",
	"title": "Tr√≤ chuy·ªán RAG v·ªõi Bedrock Knowledge Bases",
	"tags": [],
	"description": "",
	"content": "Amazon Bedrock Knowledge Bases l√† m·ªôt t√≠nh nƒÉng ƒë∆∞·ª£c qu·∫£n l√Ω to√†n ph·∫ßn, cho ph√©p b·∫°n tri·ªÉn khai quy tr√¨nh RAG (Retrieval Augmented Generation) d·ª±a tr√™n ngu·ªìn d·ªØ li·ªáu ri√™ng c·ªßa t·ªï ch·ª©c. Bedrock Knowledge Bases t·ª± ƒë·ªông h√≥a to√†n b·ªô quy tr√¨nh RAG ‚Äî t·ª´ vi·ªác n·∫°p d·ªØ li·ªáu, truy xu·∫•t th√¥ng tin, ƒë·∫øn b·ªï sung v√†o prompt ‚Äî m√† kh√¥ng c·∫ßn t√≠ch h·ª£p th·ªß c√¥ng ho·∫∑c t·ª± qu·∫£n l√Ω lu·ªìng d·ªØ li·ªáu. ƒêi·ªÅu n√†y gi√∫p b·∫°n cung c·∫•p cho c√°c m√¥ h√¨nh n·ªÅn t·∫£ng (Foundation Models - FMs) v√† t√°c nh√¢n (Agents) th√¥ng tin c·∫≠p nh·∫≠t v√† ri√™ng bi·ªát, t·ª´ ƒë√≥ t·∫°o ra ph·∫£n h·ªìi ch√≠nh x√°c v√† ph√π h·ª£p h∆°n.\nAmazon Bedrock Knowledge Bases d·ª±a v√†o hai th√†nh ph·∫ßn ch√≠nh ƒë·ªÉ th·ª±c hi·ªán vi·ªác truy xu·∫•t th√¥ng tin hi·ªáu qu·∫£: embeddings v√† vector stores. Hai th√†nh ph·∫ßn n√†y ho·∫°t ƒë·ªông c√πng nhau ƒë·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu vƒÉn b·∫£n th√†nh ƒë·ªãnh d·∫°ng c√≥ th·ªÉ t√¨m ki·∫øm nhanh ch√≥ng d·ª±a tr√™n s·ª± t∆∞∆°ng ƒë·ªìng v·ªÅ ng·ªØ nghƒ©a.\nEmbeddings l√† bi·ªÉu di·ªÖn s·ªë c·ªßa vƒÉn b·∫£n nh·∫±m n·∫Øm b·∫Øt √Ω nghƒ©a ng·ªØ nghƒ©a. Trong Amazon Bedrock, c√°c m√¥ h√¨nh embedding nh∆∞ Amazon Titan Embeddings ho·∫∑c Cohere Embed s·∫Ω chuy·ªÉn vƒÉn b·∫£n t·ª´ t√†i li·ªáu c·ªßa b·∫°n th√†nh c√°c vector ƒë·∫∑c (dense vectors). Qu√° tr√¨nh n√†y cho ph√©p h·ªá th·ªëng so s√°nh v√† truy xu·∫•t n·ªôi dung c√≥ √Ω nghƒ©a t∆∞∆°ng t·ª± m·ªôt c√°ch hi·ªáu qu·∫£, t·∫°o n·ªÅn t·∫£ng cho kh·∫£ nƒÉng ‚Äúhi·ªÉu‚Äù d·ªØ li·ªáu c·ªßa Knowledge Base.\nVector stores l√† c∆° s·ªü d·ªØ li·ªáu chuy√™n bi·ªát ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ l·∫≠p ch·ªâ m·ª•c v√† truy v·∫•n c√°c embedding vector m·ªôt c√°ch hi·ªáu qu·∫£. Amazon Bedrock h·ªó tr·ª£ c√°c tu·ª≥ ch·ªçn nh∆∞ Amazon OpenSearch Serverless ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Amazon ho·∫∑c gi·∫£i ph√°p t√πy ch·ªânh nh∆∞ Amazon Aurora PostgreSQL v·ªõi ti·ªán √≠ch m·ªü r·ªông pgvector. C√°c vector store n√†y cho ph√©p th·ª±c hi·ªán truy v·∫•n theo ng·ªØ nghƒ©a nhanh ch√≥ng, gi√∫p h·ªá th·ªëng nh·∫≠n di·ªán v√† truy xu·∫•t th√¥ng tin ph√π h·ª£p nh·∫•t khi x·ª≠ l√Ω truy v·∫•n ‚Äî t·ª´ ƒë√≥ n√¢ng cao hi·ªáu qu·∫£ c·ªßa quy tr√¨nh RAG.\nCh·ª©c nƒÉng v√† L·ª£i √≠ch Tri·ªÉn khai RAG li·ªÅn m·∫°ch: Amazon Bedrock Knowledge Bases t·ª± ƒë·ªông h√≥a to√†n b·ªô quy tr√¨nh RAG ‚Äî t·ª´ n·∫°p d·ªØ li·ªáu, truy xu·∫•t th√¥ng tin, ƒë·∫øn b·ªï sung v√†o prompt ‚Äî m√† kh√¥ng c·∫ßn t√≠ch h·ª£p th·ªß c√¥ng ho·∫∑c t·ª± qu·∫£n l√Ω lu·ªìng d·ªØ li·ªáu. ƒêi·ªÅu n√†y cho ph√©p b·∫°n cung c·∫•p cho m√¥ h√¨nh n·ªÅn t·∫£ng (FMs) v√† c√°c t√°c nh√¢n (Agents) th√¥ng tin c·∫≠p nh·∫≠t v√† ƒë·ªôc quy·ªÅn ƒë·ªÉ t·∫°o ra ph·∫£n h·ªìi ch√≠nh x√°c h∆°n.\nK·∫øt n·ªëi d·ªØ li·ªáu an to√†n: D·ªãch v·ª• s·∫Ω t·ª± ƒë·ªông truy xu·∫•t t√†i li·ªáu t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu m√† b·∫°n ch·ªâ ƒë·ªãnh, bao g·ªìm Amazon S3, Web Crawler, Salesforce, v√† SharePoint. Sau ƒë√≥, n·ªôi dung s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω, chia nh·ªè th√†nh c√°c kh·ªëi vƒÉn b·∫£n, chuy·ªÉn th√†nh embeddings, v√† l∆∞u tr·ªØ trong vector database.\nTu·ª≥ ch·ªânh linh ho·∫°t: B·∫°n c√≥ th·ªÉ tinh ch·ªânh c·∫£ qu√° tr√¨nh n·∫°p d·ªØ li·ªáu v√† truy xu·∫•t ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c cho t·ª´ng tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ª• th·ªÉ. C√°c t√πy ch·ªçn ph√¢n t√≠ch n√¢ng cao gi√∫p hi·ªÉu d·ªØ li·ªáu phi c·∫•u tr√∫c ph·ª©c t·∫°p, v√† b·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu chi·∫øn l∆∞·ª£c chia nh·ªè n·ªôi dung (chunking) ho·∫∑c t·ª± vi·∫øt m√£ chia nh·ªè theo nhu c·∫ßu.\nKi·∫øn tr√∫c c·ªßa Knowledge Bases Trong hai t√°c v·ª• ti·∫øp theo, b·∫°n s·∫Ω x√¢y d·ª±ng m·ªôt chatbot s·ª≠ d·ª•ng Amazon Bedrock Knowledge Bases. Ki·∫øn tr√∫c t·ªïng th·ªÉ c·ªßa gi·∫£i ph√°p ƒë∆∞·ª£c minh ho·∫° b√™n d∆∞·ªõi:\nC√°c th√†nh ph·∫ßn c·ªßa Knowledge Base v√† Vector Search Knowledge Bases: Kho l∆∞u tr·ªØ trung t√¢m ch·ª©a th√¥ng tin c√≥ c·∫•u tr√∫c Amazon S3: N∆°i l∆∞u tr·ªØ t√†i li·ªáu (pdf, csv, txt, v.v.) Amazon OpenSearch: Vector database v√† c√¥ng c·ª• t√¨m ki·∫øm cho truy v·∫•n t∆∞∆°ng ƒë·ªìng hi·ªáu qu·∫£ Amazon Bedrock: Cung c·∫•p c√°c m√¥ h√¨nh embedding nh∆∞ Amazon Titan Embeddings Quy tr√¨nh l√†m vi·ªác c·ªßa Knowledge Base v√† Vector Search T√†i li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ trong Amazon S3 VƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t v√† x·ª≠ l√Ω t·ª´ c√°c t√†i li·ªáu M√¥ h√¨nh Titan Embeddings c·ªßa Amazon Bedrock t·∫°o ra vector ƒë·∫°i di·ªán cho vƒÉn b·∫£n C√°c vector ƒë∆∞·ª£c l∆∞u v√†o Amazon OpenSearch v√† ƒë√≥ng vai tr√≤ l√† vector database Knowledge Bases thu nh·∫≠n v√† c·∫•u tr√∫c th√¥ng tin, t√≠ch h·ª£p c√°c vector ƒë√£ t·∫°o C√°c h√†m AWS Lambda (RAG/KB/LLM Functions) t∆∞∆°ng t√°c v·ªõi Knowledge Bases v√† vector search RAG (Retrieval Augmented Generation) s·ª≠ d·ª•ng t√¨m ki·∫øm t∆∞∆°ng ƒë·ªìng vector ƒë·ªÉ truy xu·∫•t th√¥ng tin li√™n quan üîç C√°c t√≠nh nƒÉng ch√≠nh c·ªßa t√≠ch h·ª£p Knowledge Base v√† Vector Search T√¨m ki·∫øm theo ng·ªØ nghƒ©a s·ª≠ d·ª•ng vector bi·ªÉu di·ªÖn vƒÉn b·∫£n T√¨m ki·∫øm t∆∞∆°ng ƒë·ªìng hi·ªáu qu·∫£ th√¥ng qua ch·ª©c nƒÉng vector database c·ªßa Amazon OpenSearch T√≠ch h·ª£p Amazon Titan Embeddings ƒë·ªÉ vector h√≥a vƒÉn b·∫£n ch·∫•t l∆∞·ª£ng cao C·∫£i thi·ªán ng·ªØ c·∫£nh v√† ƒë·ªô ch√≠nh x√°c trong ph·∫£n h·ªìi chatbot th√¥ng qua truy xu·∫•t d·ª±a tr√™n vector N√¢ng cao m·ª©c ƒë·ªô li√™n quan trong qu√° tr√¨nh truy xu·∫•t th√¥ng tin ph·ª•c v·ª• cho RAG C√≥ kh·∫£ nƒÉng x·ª≠ l√Ω v√† t√¨m ki·∫øm kh·ªëi l∆∞·ª£ng l·ªõn d·ªØ li·ªáu vƒÉn b·∫£n phi c·∫•u tr√∫c K·∫øt h·ª£p m∆∞·ª£t m√† gi·ªØa t√¨m ki·∫øm theo t·ª´ kh√≥a truy·ªÅn th·ªëng v√† t√¨m ki·∫øm theo ng·ªØ nghƒ©a d·ª±a tr√™n vector Thi·∫øt l·∫≠p n√†y cho ph√©p chatbot th·ª±c hi·ªán c√°c truy v·∫•n ng·ªØ nghƒ©a n√¢ng cao tr√™n n·ªÅn t·∫£ng ki·∫øn th·ª©c doanh nghi·ªáp.\nB·∫±ng c√°ch s·ª≠ d·ª•ng Amazon Titan Embeddings ƒë·ªÉ t·∫°o vector ƒë·∫°i di·ªán cho vƒÉn b·∫£n v√† l∆∞u tr·ªØ ch√∫ng trong Amazon OpenSearch nh∆∞ m·ªôt vector database, h·ªá th·ªëng c√≥ th·ªÉ t√¨m ra th√¥ng tin li√™n quan v·ªÅ m·∫∑t ng·ªØ c·∫£nh ngay c·∫£ khi kh√¥ng c√≥ t·ª´ kh√≥a kh·ªõp ch√≠nh x√°c.\nƒêi·ªÅu n√†y gi√∫p chatbot hi·ªÉu v√† ph·∫£n h·ªìi truy v·∫•n ng∆∞·ªùi d√πng v·ªõi th√¥ng tin ph√π h·ª£p h∆°n t·ª´ kho tri th·ª©c c·ªßa doanh nghi·ªáp.\n"
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/10-cleanup/",
	"title": "D·ªçn d·∫πp t√†i nguy√™n",
	"tags": [],
	"description": "",
	"content": "Sau khi b·∫°n ho√†n th√†nh workshop, ƒë·ªÉ tr√°nh ph√°t sinh chi ph√≠, b·∫°n n√™n x√≥a c√°c t√†i nguy√™n ƒë√£ t·∫°o trong t√†i kho·∫£n AWS c·ªßa m√¨nh.\nS·ª≠ d·ª•ng AWS CLI ƒë·ªÉ x√≥a t√†i nguy√™n\nX√≥a ·ª©ng d·ª•ng AWS SAM v√† CloudFormation stack kh·ªüi t·∫°o ban ƒë·∫ßu Truy c·∫≠p terminal c·ªßa AWS Cloud9, sau ƒë√≥ ch·∫°y c√°c l·ªánh sau:\nƒê·ªÉ x√≥a SAM stack, ch·∫°y l·ªánh sau: cd ~/environment/bedrock-serverless-workshop sam delete ƒê·ªÉ x√≥a stack kh·ªüi t·∫°o ban ƒë·∫ßu, ch·∫°y l·ªánh sau: aws cloudformation delete-stack --stack-name $CFNStackName "
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://PVinhP.github.io/PPV_Workshop_01/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]